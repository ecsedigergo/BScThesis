/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.ide.contentassist.antlr;

import com.google.inject.Inject;
import hu.bme.mit.ide.contentassist.antlr.internal.InternalErrorModelParser;
import hu.bme.mit.services.ErrorModelGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ErrorModelParser extends AbstractContentAssistParser {

	@Inject
	private ErrorModelGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalErrorModelParser createParser() {
		InternalErrorModelParser result = new InternalErrorModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEModelElementAccess().getAlternatives(), "rule__EModelElement__Alternatives");
					put(grammarAccess.getOuterPropagationAccess().getAlternatives(), "rule__OuterPropagation__Alternatives");
					put(grammarAccess.getTransitionFeatureDecAccess().getAlternatives(), "rule__TransitionFeatureDec__Alternatives");
					put(grammarAccess.getEModelDecAccess().getGroup(), "rule__EModelDec__Group__0");
					put(grammarAccess.getInPropDecAccess().getGroup(), "rule__InPropDec__Group__0");
					put(grammarAccess.getOutPropDecAccess().getGroup(), "rule__OutPropDec__Group__0");
					put(grammarAccess.getStateDecAccess().getGroup(), "rule__StateDec__Group__0");
					put(grammarAccess.getEventDecAccess().getGroup(), "rule__EventDec__Group__0");
					put(grammarAccess.getTriggerDecAccess().getGroup(), "rule__TriggerDec__Group__0");
					put(grammarAccess.getActionDecAccess().getGroup(), "rule__ActionDec__Group__0");
					put(grammarAccess.getOccurenceDecAccess().getGroup(), "rule__OccurenceDec__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getTransitionStateAccess().getGroup(), "rule__TransitionState__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getErrorModelAccess().getAbstractElementAssignment(), "rule__ErrorModel__AbstractElementAssignment");
					put(grammarAccess.getEModelDecAccess().getNameAssignment_1(), "rule__EModelDec__NameAssignment_1");
					put(grammarAccess.getEModelDecAccess().getEmodelElementsAssignment_3(), "rule__EModelDec__EmodelElementsAssignment_3");
					put(grammarAccess.getInPropDecAccess().getNameAssignment_1(), "rule__InPropDec__NameAssignment_1");
					put(grammarAccess.getInPropDecAccess().getAffectedStateAssignment_3(), "rule__InPropDec__AffectedStateAssignment_3");
					put(grammarAccess.getOutPropDecAccess().getNameAssignment_1(), "rule__OutPropDec__NameAssignment_1");
					put(grammarAccess.getOutPropDecAccess().getFromStateAssignment_3(), "rule__OutPropDec__FromStateAssignment_3");
					put(grammarAccess.getStateDecAccess().getNameAssignment_1(), "rule__StateDec__NameAssignment_1");
					put(grammarAccess.getEventDecAccess().getNameAssignment_1(), "rule__EventDec__NameAssignment_1");
					put(grammarAccess.getEventDecAccess().getFeaturesAssignment_3(), "rule__EventDec__FeaturesAssignment_3");
					put(grammarAccess.getTriggerDecAccess().getNameAssignment_1(), "rule__TriggerDec__NameAssignment_1");
					put(grammarAccess.getActionDecAccess().getNameAssignment_1(), "rule__ActionDec__NameAssignment_1");
					put(grammarAccess.getTransitionStateAccess().getSourceStateAssignment_2(), "rule__TransitionState__SourceStateAssignment_2");
					put(grammarAccess.getTransitionStateAccess().getTargetStateAssignment_4(), "rule__TransitionState__TargetStateAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalErrorModelParser typedParser = (InternalErrorModelParser) parser;
			typedParser.entryRuleErrorModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ErrorModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ErrorModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
