/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DepModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DepModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.DepModel");
		private final Assignment cDepmodelsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDepmodelsAbstractModelDecParserRuleCall_0 = (RuleCall)cDepmodelsAssignment.eContents().get(0);
		
		//DepModel:
		//	depmodels+=abstractModelDec*;
		@Override public ParserRule getRule() { return rule; }
		
		//depmodels+=abstractModelDec*
		public Assignment getDepmodelsAssignment() { return cDepmodelsAssignment; }
		
		//abstractModelDec
		public RuleCall getDepmodelsAbstractModelDecParserRuleCall_0() { return cDepmodelsAbstractModelDecParserRuleCall_0; }
	}
	public class AbstractModelDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.abstractModelDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cErrorModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPortTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//abstractModelDec:
		//	ComponentModel | ErrorModel | PortType;
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentModel | ErrorModel | PortType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComponentModel
		public RuleCall getComponentModelParserRuleCall_0() { return cComponentModelParserRuleCall_0; }
		
		//ErrorModel
		public RuleCall getErrorModelParserRuleCall_1() { return cErrorModelParserRuleCall_1; }
		
		//PortType
		public RuleCall getPortTypeParserRuleCall_2() { return cPortTypeParserRuleCall_2; }
	}
	public class PortTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.PortType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEModesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEModesErrorModesParserRuleCall_4_0 = (RuleCall)cEModesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PortType:
		//	'port' 'type' name=ID '{'
		//	eModes=errorModes*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'port' 'type' name=ID '{' eModes=errorModes* '}'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//eModes=errorModes*
		public Assignment getEModesAssignment_4() { return cEModesAssignment_4; }
		
		//errorModes
		public RuleCall getEModesErrorModesParserRuleCall_4_0() { return cEModesErrorModesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ErrorModesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.errorModes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//errorModes:
		//	'error' 'mode' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'error' 'mode' name=ID
		public Group getGroup() { return cGroup; }
		
		//'error'
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }
		
		//'mode'
		public Keyword getModeKeyword_1() { return cModeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class ErrorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ErrorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEmodelElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEmodelElementsEModelElementParserRuleCall_4_0 = (RuleCall)cEmodelElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Error model ************-
		//ErrorModel:
		//	'error' 'model' name=ID '{'
		//	emodelElements+=EModelElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'error' 'model' name=ID '{' emodelElements+=EModelElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'error'
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }
		
		//'model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//emodelElements+=EModelElement*
		public Assignment getEmodelElementsAssignment_4() { return cEmodelElementsAssignment_4; }
		
		//EModelElement
		public RuleCall getEmodelElementsEModelElementParserRuleCall_4_0() { return cEmodelElementsEModelElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.EModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EModelElement:
		//	StateDec | EventDec // | OuterPropagation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StateDec | EventDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StateDec
		public RuleCall getStateDecParserRuleCall_0() { return cStateDecParserRuleCall_0; }
		
		//EventDec
		public RuleCall getEventDecParserRuleCall_1() { return cEventDecParserRuleCall_1; }
	}
	public class StateDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.StateDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		/// *OuterPropagation:
		//	InPropDec | OutPropDec;
		//
		//InPropDec:
		//	'propagation in' name=ID 'trigger' affectedState=[EventDec];
		//
		//OutPropDec:
		//	'propagation out' name=ID 'action' fromState=[EventDec];* / StateDec:
		//	'error' 'state' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'error' 'state' name=ID
		public Group getGroup() { return cGroup; }
		
		//'error'
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class EventDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.EventDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesTransitionFeatureDecParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EventDec:
		//	'transition' name=ID '{'
		//	Features+=TransitionFeatureDec*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' name=ID '{' Features+=TransitionFeatureDec* '}'
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//Features+=TransitionFeatureDec*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//TransitionFeatureDec
		public RuleCall getFeaturesTransitionFeatureDecParserRuleCall_3_0() { return cFeaturesTransitionFeatureDecParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TransitionFeatureDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.TransitionFeatureDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransitionStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTriggerDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionDecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOccurenceDecParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TransitionFeatureDec:
		//	TransitionState | TriggerDec | ActionDec | OccurenceDec;
		@Override public ParserRule getRule() { return rule; }
		
		//TransitionState | TriggerDec | ActionDec | OccurenceDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TransitionState
		public RuleCall getTransitionStateParserRuleCall_0() { return cTransitionStateParserRuleCall_0; }
		
		//TriggerDec
		public RuleCall getTriggerDecParserRuleCall_1() { return cTriggerDecParserRuleCall_1; }
		
		//ActionDec
		public RuleCall getActionDecParserRuleCall_2() { return cActionDecParserRuleCall_2; }
		
		//OccurenceDec
		public RuleCall getOccurenceDecParserRuleCall_3() { return cOccurenceDecParserRuleCall_3; }
	}
	public class TransitionStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.TransitionState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceStateStateDecCrossReference_2_0 = (CrossReference)cSourceStateAssignment_2.eContents().get(0);
		private final RuleCall cSourceStateStateDecIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceStateStateDecCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateStateDecCrossReference_4_0 = (CrossReference)cTargetStateAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateStateDecIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateStateDecCrossReference_4_0.eContents().get(1);
		
		//TransitionState:
		//	'states' ':' sourceState=[StateDec] '->' targetState=[StateDec];
		@Override public ParserRule getRule() { return rule; }
		
		//'states' ':' sourceState=[StateDec] '->' targetState=[StateDec]
		public Group getGroup() { return cGroup; }
		
		//'states'
		public Keyword getStatesKeyword_0() { return cStatesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//sourceState=[StateDec]
		public Assignment getSourceStateAssignment_2() { return cSourceStateAssignment_2; }
		
		//[StateDec]
		public CrossReference getSourceStateStateDecCrossReference_2_0() { return cSourceStateStateDecCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceStateStateDecIDTerminalRuleCall_2_0_1() { return cSourceStateStateDecIDTerminalRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//targetState=[StateDec]
		public Assignment getTargetStateAssignment_4() { return cTargetStateAssignment_4; }
		
		//[StateDec]
		public CrossReference getTargetStateStateDecCrossReference_4_0() { return cTargetStateStateDecCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateStateDecIDTerminalRuleCall_4_0_1() { return cTargetStateStateDecIDTerminalRuleCall_4_0_1; }
	}
	public class TriggerDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.TriggerDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPortTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPortTypePortCrossReference_2_0 = (CrossReference)cPortTypeAssignment_2.eContents().get(0);
		private final RuleCall cPortTypePortIDTerminalRuleCall_2_0_1 = (RuleCall)cPortTypePortCrossReference_2_0.eContents().get(1);
		private final Assignment cErrorModeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cErrorModeErrorModesCrossReference_3_0 = (CrossReference)cErrorModeAssignment_3.eContents().get(0);
		private final RuleCall cErrorModeErrorModesIDTerminalRuleCall_3_0_1 = (RuleCall)cErrorModeErrorModesCrossReference_3_0.eContents().get(1);
		
		//TriggerDec:
		//	'trigger' name=ID portType=[Port] errorMode=[errorModes];
		@Override public ParserRule getRule() { return rule; }
		
		//'trigger' name=ID portType=[Port] errorMode=[errorModes]
		public Group getGroup() { return cGroup; }
		
		//'trigger'
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//portType=[Port]
		public Assignment getPortTypeAssignment_2() { return cPortTypeAssignment_2; }
		
		//[Port]
		public CrossReference getPortTypePortCrossReference_2_0() { return cPortTypePortCrossReference_2_0; }
		
		//ID
		public RuleCall getPortTypePortIDTerminalRuleCall_2_0_1() { return cPortTypePortIDTerminalRuleCall_2_0_1; }
		
		//errorMode=[errorModes]
		public Assignment getErrorModeAssignment_3() { return cErrorModeAssignment_3; }
		
		//[errorModes]
		public CrossReference getErrorModeErrorModesCrossReference_3_0() { return cErrorModeErrorModesCrossReference_3_0; }
		
		//ID
		public RuleCall getErrorModeErrorModesIDTerminalRuleCall_3_0_1() { return cErrorModeErrorModesIDTerminalRuleCall_3_0_1; }
	}
	public class ActionDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ActionDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPortTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPortTypePortCrossReference_2_0 = (CrossReference)cPortTypeAssignment_2.eContents().get(0);
		private final RuleCall cPortTypePortIDTerminalRuleCall_2_0_1 = (RuleCall)cPortTypePortCrossReference_2_0.eContents().get(1);
		private final Assignment cErrorModeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cErrorModeErrorModesCrossReference_3_0 = (CrossReference)cErrorModeAssignment_3.eContents().get(0);
		private final RuleCall cErrorModeErrorModesIDTerminalRuleCall_3_0_1 = (RuleCall)cErrorModeErrorModesCrossReference_3_0.eContents().get(1);
		
		//ActionDec:
		//	'action' name=ID portType=[Port] errorMode=[errorModes];
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=ID portType=[Port] errorMode=[errorModes]
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//portType=[Port]
		public Assignment getPortTypeAssignment_2() { return cPortTypeAssignment_2; }
		
		//[Port]
		public CrossReference getPortTypePortCrossReference_2_0() { return cPortTypePortCrossReference_2_0; }
		
		//ID
		public RuleCall getPortTypePortIDTerminalRuleCall_2_0_1() { return cPortTypePortIDTerminalRuleCall_2_0_1; }
		
		//errorMode=[errorModes]
		public Assignment getErrorModeAssignment_3() { return cErrorModeAssignment_3; }
		
		//[errorModes]
		public CrossReference getErrorModeErrorModesCrossReference_3_0() { return cErrorModeErrorModesCrossReference_3_0; }
		
		//ID
		public RuleCall getErrorModeErrorModesIDTerminalRuleCall_3_0_1() { return cErrorModeErrorModesIDTerminalRuleCall_3_0_1; }
	}
	public class OccurenceDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.OccurenceDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOccurrenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDOUBLEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OccurenceDec:
		//	'occurrence' DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'occurrence' DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'occurrence'
		public Keyword getOccurrenceKeyword_0() { return cOccurrenceKeyword_0; }
		
		//DOUBLE
		public RuleCall getDOUBLEParserRuleCall_1() { return cDOUBLEParserRuleCall_1; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ComponentModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsComponentModelDecParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		////Component model ***************
		// ComponentModel:
		//	elements+=ComponentModelDec+;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ComponentModelDec+
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//ComponentModelDec
		public RuleCall getElementsComponentModelDecParserRuleCall_0() { return cElementsComponentModelDecParserRuleCall_0; }
	}
	public class ComponentModelDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentModelDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemConnDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentModelDec:
		//	SystemDec | SystemConnDec;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemDec | SystemConnDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemDec
		public RuleCall getSystemDecParserRuleCall_0() { return cSystemDecParserRuleCall_0; }
		
		//SystemConnDec
		public RuleCall getSystemConnDecParserRuleCall_1() { return cSystemConnDecParserRuleCall_1; }
	}
	public class SystemConnDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemConnDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceSystemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceSystemSystemDecCrossReference_4_0 = (CrossReference)cSourceSystemAssignment_4.eContents().get(0);
		private final RuleCall cSourceSystemSystemDecIDTerminalRuleCall_4_0_1 = (RuleCall)cSourceSystemSystemDecCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourcePortAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourcePortSystemPortDecCrossReference_6_0 = (CrossReference)cSourcePortAssignment_6.eContents().get(0);
		private final RuleCall cSourcePortSystemPortDecIDTerminalRuleCall_6_0_1 = (RuleCall)cSourcePortSystemPortDecCrossReference_6_0.eContents().get(1);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetSystemAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetSystemSystemDecCrossReference_8_0 = (CrossReference)cTargetSystemAssignment_8.eContents().get(0);
		private final RuleCall cTargetSystemSystemDecIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetSystemSystemDecCrossReference_8_0.eContents().get(1);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetPortAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cTargetPortSystemPortDecCrossReference_10_0 = (CrossReference)cTargetPortAssignment_10.eContents().get(0);
		private final RuleCall cTargetPortSystemPortDecIDTerminalRuleCall_10_0_1 = (RuleCall)cTargetPortSystemPortDecCrossReference_10_0.eContents().get(1);
		
		//SystemConnDec:
		//	'system' 'connection' name=ID 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortDec] 'to'
		//	targetSystem=[SystemDec] '.' targetPort=[SystemPortDec];
		@Override public ParserRule getRule() { return rule; }
		
		//'system' 'connection' name=ID 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortDec] 'to'
		//targetSystem=[SystemDec] '.' targetPort=[SystemPortDec]
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'connection'
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//sourceSystem=[SystemDec]
		public Assignment getSourceSystemAssignment_4() { return cSourceSystemAssignment_4; }
		
		//[SystemDec]
		public CrossReference getSourceSystemSystemDecCrossReference_4_0() { return cSourceSystemSystemDecCrossReference_4_0; }
		
		//ID
		public RuleCall getSourceSystemSystemDecIDTerminalRuleCall_4_0_1() { return cSourceSystemSystemDecIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//sourcePort=[SystemPortDec]
		public Assignment getSourcePortAssignment_6() { return cSourcePortAssignment_6; }
		
		//[SystemPortDec]
		public CrossReference getSourcePortSystemPortDecCrossReference_6_0() { return cSourcePortSystemPortDecCrossReference_6_0; }
		
		//ID
		public RuleCall getSourcePortSystemPortDecIDTerminalRuleCall_6_0_1() { return cSourcePortSystemPortDecIDTerminalRuleCall_6_0_1; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//targetSystem=[SystemDec]
		public Assignment getTargetSystemAssignment_8() { return cTargetSystemAssignment_8; }
		
		//[SystemDec]
		public CrossReference getTargetSystemSystemDecCrossReference_8_0() { return cTargetSystemSystemDecCrossReference_8_0; }
		
		//ID
		public RuleCall getTargetSystemSystemDecIDTerminalRuleCall_8_0_1() { return cTargetSystemSystemDecIDTerminalRuleCall_8_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//targetPort=[SystemPortDec]
		public Assignment getTargetPortAssignment_10() { return cTargetPortAssignment_10; }
		
		//[SystemPortDec]
		public CrossReference getTargetPortSystemPortDecCrossReference_10_0() { return cTargetPortSystemPortDecCrossReference_10_0; }
		
		//ID
		public RuleCall getTargetPortSystemPortDecIDTerminalRuleCall_10_0_1() { return cTargetPortSystemPortDecIDTerminalRuleCall_10_0_1; }
	}
	public class SystemDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSysFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSysFeaturesAbstractFeaturesParserRuleCall_4_0 = (RuleCall)cSysFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SystemDec:
		//	'system' 'declaration' name=ID '{'
		//	sysFeatures+=AbstractFeatures*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' 'declaration' name=ID '{' sysFeatures+=AbstractFeatures* '}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'declaration'
		public Keyword getDeclarationKeyword_1() { return cDeclarationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//sysFeatures+=AbstractFeatures*
		public Assignment getSysFeaturesAssignment_4() { return cSysFeaturesAssignment_4; }
		
		//AbstractFeatures
		public RuleCall getSysFeaturesAbstractFeaturesParserRuleCall_4_0() { return cSysFeaturesAbstractFeaturesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AbstractFeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.AbstractFeatures");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentImplParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompConnDecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSystemPortDecParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractFeatures:
		//	ComponentType | ComponentImpl | CompConnDec | SystemPortDec;
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentType | ComponentImpl | CompConnDec | SystemPortDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComponentType
		public RuleCall getComponentTypeParserRuleCall_0() { return cComponentTypeParserRuleCall_0; }
		
		//ComponentImpl
		public RuleCall getComponentImplParserRuleCall_1() { return cComponentImplParserRuleCall_1; }
		
		//CompConnDec
		public RuleCall getCompConnDecParserRuleCall_2() { return cCompConnDecParserRuleCall_2; }
		
		//SystemPortDec
		public RuleCall getSystemPortDecParserRuleCall_3() { return cSystemPortDecParserRuleCall_3; }
	}
	public class SystemPortDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemPortDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemPortInParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemPortOutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SystemPortDec:
		//	SystemPortIn | SystemPortOut;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemPortIn | SystemPortOut
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemPortIn
		public RuleCall getSystemPortInParserRuleCall_0() { return cSystemPortInParserRuleCall_0; }
		
		//SystemPortOut
		public RuleCall getSystemPortOutParserRuleCall_1() { return cSystemPortOutParserRuleCall_1; }
	}
	public class SystemPortInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemPortIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInCompAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInCompComponentImplCrossReference_5_0 = (CrossReference)cInCompAssignment_5.eContents().get(0);
		private final RuleCall cInCompComponentImplIDTerminalRuleCall_5_0_1 = (RuleCall)cInCompComponentImplCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInPortAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cInPortInPortCrossReference_7_0 = (CrossReference)cInPortAssignment_7.eContents().get(0);
		private final RuleCall cInPortInPortIDTerminalRuleCall_7_0_1 = (RuleCall)cInPortInPortCrossReference_7_0.eContents().get(1);
		
		//SystemPortIn:
		//	'system' 'port' 'in' name=ID 'to' inComp=[ComponentImpl] '.' inPort=[InPort];
		@Override public ParserRule getRule() { return rule; }
		
		//'system' 'port' 'in' name=ID 'to' inComp=[ComponentImpl] '.' inPort=[InPort]
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'port'
		public Keyword getPortKeyword_1() { return cPortKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//inComp=[ComponentImpl]
		public Assignment getInCompAssignment_5() { return cInCompAssignment_5; }
		
		//[ComponentImpl]
		public CrossReference getInCompComponentImplCrossReference_5_0() { return cInCompComponentImplCrossReference_5_0; }
		
		//ID
		public RuleCall getInCompComponentImplIDTerminalRuleCall_5_0_1() { return cInCompComponentImplIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//inPort=[InPort]
		public Assignment getInPortAssignment_7() { return cInPortAssignment_7; }
		
		//[InPort]
		public CrossReference getInPortInPortCrossReference_7_0() { return cInPortInPortCrossReference_7_0; }
		
		//ID
		public RuleCall getInPortInPortIDTerminalRuleCall_7_0_1() { return cInPortInPortIDTerminalRuleCall_7_0_1; }
	}
	public class SystemPortOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemPortOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOutKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutCompAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cOutCompComponentImplCrossReference_5_0 = (CrossReference)cOutCompAssignment_5.eContents().get(0);
		private final RuleCall cOutCompComponentImplIDTerminalRuleCall_5_0_1 = (RuleCall)cOutCompComponentImplCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutPortAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cOutPortOutPortCrossReference_7_0 = (CrossReference)cOutPortAssignment_7.eContents().get(0);
		private final RuleCall cOutPortOutPortIDTerminalRuleCall_7_0_1 = (RuleCall)cOutPortOutPortCrossReference_7_0.eContents().get(1);
		
		//SystemPortOut:
		//	'system' 'port' 'out' name=ID 'from' outComp=[ComponentImpl] '.' outPort=[OutPort];
		@Override public ParserRule getRule() { return rule; }
		
		//'system' 'port' 'out' name=ID 'from' outComp=[ComponentImpl] '.' outPort=[OutPort]
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'port'
		public Keyword getPortKeyword_1() { return cPortKeyword_1; }
		
		//'out'
		public Keyword getOutKeyword_2() { return cOutKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'from'
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//outComp=[ComponentImpl]
		public Assignment getOutCompAssignment_5() { return cOutCompAssignment_5; }
		
		//[ComponentImpl]
		public CrossReference getOutCompComponentImplCrossReference_5_0() { return cOutCompComponentImplCrossReference_5_0; }
		
		//ID
		public RuleCall getOutCompComponentImplIDTerminalRuleCall_5_0_1() { return cOutCompComponentImplIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//outPort=[OutPort]
		public Assignment getOutPortAssignment_7() { return cOutPortAssignment_7; }
		
		//[OutPort]
		public CrossReference getOutPortOutPortCrossReference_7_0() { return cOutPortOutPortCrossReference_7_0; }
		
		//ID
		public RuleCall getOutPortOutPortIDTerminalRuleCall_7_0_1() { return cOutPortOutPortIDTerminalRuleCall_7_0_1; }
	}
	public class CompConnDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.CompConnDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceCompAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceCompComponentImplCrossReference_4_0 = (CrossReference)cSourceCompAssignment_4.eContents().get(0);
		private final RuleCall cSourceCompComponentImplIDTerminalRuleCall_4_0_1 = (RuleCall)cSourceCompComponentImplCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourcePortAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourcePortOutPortCrossReference_6_0 = (CrossReference)cSourcePortAssignment_6.eContents().get(0);
		private final RuleCall cSourcePortOutPortIDTerminalRuleCall_6_0_1 = (RuleCall)cSourcePortOutPortCrossReference_6_0.eContents().get(1);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetCompAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetCompComponentImplCrossReference_8_0 = (CrossReference)cTargetCompAssignment_8.eContents().get(0);
		private final RuleCall cTargetCompComponentImplIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetCompComponentImplCrossReference_8_0.eContents().get(1);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetPortAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cTargetPortInPortCrossReference_10_0 = (CrossReference)cTargetPortAssignment_10.eContents().get(0);
		private final RuleCall cTargetPortInPortIDTerminalRuleCall_10_0_1 = (RuleCall)cTargetPortInPortCrossReference_10_0.eContents().get(1);
		
		//CompConnDec:
		//	'component' 'connection' name=ID 'from' sourceComp=[ComponentImpl] '.' sourcePort=[OutPort]
		//	'to' targetComp=[ComponentImpl] '.' targetPort=[InPort];
		@Override public ParserRule getRule() { return rule; }
		
		//'component' 'connection' name=ID 'from' sourceComp=[ComponentImpl] '.' sourcePort=[OutPort] 'to'
		//targetComp=[ComponentImpl] '.' targetPort=[InPort]
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'connection'
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//sourceComp=[ComponentImpl]
		public Assignment getSourceCompAssignment_4() { return cSourceCompAssignment_4; }
		
		//[ComponentImpl]
		public CrossReference getSourceCompComponentImplCrossReference_4_0() { return cSourceCompComponentImplCrossReference_4_0; }
		
		//ID
		public RuleCall getSourceCompComponentImplIDTerminalRuleCall_4_0_1() { return cSourceCompComponentImplIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//sourcePort=[OutPort]
		public Assignment getSourcePortAssignment_6() { return cSourcePortAssignment_6; }
		
		//[OutPort]
		public CrossReference getSourcePortOutPortCrossReference_6_0() { return cSourcePortOutPortCrossReference_6_0; }
		
		//ID
		public RuleCall getSourcePortOutPortIDTerminalRuleCall_6_0_1() { return cSourcePortOutPortIDTerminalRuleCall_6_0_1; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//targetComp=[ComponentImpl]
		public Assignment getTargetCompAssignment_8() { return cTargetCompAssignment_8; }
		
		//[ComponentImpl]
		public CrossReference getTargetCompComponentImplCrossReference_8_0() { return cTargetCompComponentImplCrossReference_8_0; }
		
		//ID
		public RuleCall getTargetCompComponentImplIDTerminalRuleCall_8_0_1() { return cTargetCompComponentImplIDTerminalRuleCall_8_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//targetPort=[InPort]
		public Assignment getTargetPortAssignment_10() { return cTargetPortAssignment_10; }
		
		//[InPort]
		public CrossReference getTargetPortInPortCrossReference_10_0() { return cTargetPortInPortCrossReference_10_0; }
		
		//ID
		public RuleCall getTargetPortInPortIDTerminalRuleCall_10_0_1() { return cTargetPortInPortIDTerminalRuleCall_10_0_1; }
	}
	public class ComponentImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cImplementationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuperTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSuperTypeComponentTypeCrossReference_4_0 = (CrossReference)cSuperTypeAssignment_4.eContents().get(0);
		private final RuleCall cSuperTypeComponentTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cSuperTypeComponentTypeCrossReference_4_0.eContents().get(1);
		
		//ComponentImpl:
		//	'component' 'implementation' name=ID ':' superType=[ComponentType];
		@Override public ParserRule getRule() { return rule; }
		
		//'component' 'implementation' name=ID ':' superType=[ComponentType]
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'implementation'
		public Keyword getImplementationKeyword_1() { return cImplementationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//superType=[ComponentType]
		public Assignment getSuperTypeAssignment_4() { return cSuperTypeAssignment_4; }
		
		//[ComponentType]
		public CrossReference getSuperTypeComponentTypeCrossReference_4_0() { return cSuperTypeComponentTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getSuperTypeComponentTypeIDTerminalRuleCall_4_0_1() { return cSuperTypeComponentTypeIDTerminalRuleCall_4_0_1; }
	}
	public class ComponentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCompFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCompFeaturesPortParserRuleCall_4_0 = (RuleCall)cCompFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComponentType:
		//	'component' 'type' name=ID '{'
		//	compFeatures+=Port*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' 'type' name=ID '{' compFeatures+=Port* '}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//compFeatures+=Port*
		public Assignment getCompFeaturesAssignment_4() { return cCompFeaturesAssignment_4; }
		
		//Port
		public RuleCall getCompFeaturesPortParserRuleCall_4_0() { return cCompFeaturesPortParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Port:
		//	InPort | OutPort;
		@Override public ParserRule getRule() { return rule; }
		
		//InPort | OutPort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InPort
		public RuleCall getInPortParserRuleCall_0() { return cInPortParserRuleCall_0; }
		
		//OutPort
		public RuleCall getOutPortParserRuleCall_1() { return cOutPortParserRuleCall_1; }
	}
	public class InPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.InPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuperTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSuperTypePortTypeCrossReference_5_0 = (CrossReference)cSuperTypeAssignment_5.eContents().get(0);
		private final RuleCall cSuperTypePortTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cSuperTypePortTypeCrossReference_5_0.eContents().get(1);
		
		//InPort:
		//	'port' 'instance' 'in' name=ID ':' superType=[PortType];
		@Override public ParserRule getRule() { return rule; }
		
		//'port' 'instance' 'in' name=ID ':' superType=[PortType]
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'instance'
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//superType=[PortType]
		public Assignment getSuperTypeAssignment_5() { return cSuperTypeAssignment_5; }
		
		//[PortType]
		public CrossReference getSuperTypePortTypeCrossReference_5_0() { return cSuperTypePortTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getSuperTypePortTypeIDTerminalRuleCall_5_0_1() { return cSuperTypePortTypeIDTerminalRuleCall_5_0_1; }
	}
	public class OutPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.OutPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOutKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuperTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSuperTypePortTypeCrossReference_5_0 = (CrossReference)cSuperTypeAssignment_5.eContents().get(0);
		private final RuleCall cSuperTypePortTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cSuperTypePortTypeCrossReference_5_0.eContents().get(1);
		
		//OutPort:
		//	'port' 'instance' 'out' name=ID ':' superType=[PortType];
		@Override public ParserRule getRule() { return rule; }
		
		//'port' 'instance' 'out' name=ID ':' superType=[PortType]
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'instance'
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }
		
		//'out'
		public Keyword getOutKeyword_2() { return cOutKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//superType=[PortType]
		public Assignment getSuperTypeAssignment_5() { return cSuperTypeAssignment_5; }
		
		//[PortType]
		public CrossReference getSuperTypePortTypeCrossReference_5_0() { return cSuperTypePortTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getSuperTypePortTypeIDTerminalRuleCall_5_0_1() { return cSuperTypePortTypeIDTerminalRuleCall_5_0_1; }
	}
	
	
	private final DepModelElements pDepModel;
	private final AbstractModelDecElements pAbstractModelDec;
	private final PortTypeElements pPortType;
	private final ErrorModesElements pErrorModes;
	private final ErrorModelElements pErrorModel;
	private final EModelElementElements pEModelElement;
	private final StateDecElements pStateDec;
	private final EventDecElements pEventDec;
	private final TransitionFeatureDecElements pTransitionFeatureDec;
	private final TransitionStateElements pTransitionState;
	private final TriggerDecElements pTriggerDec;
	private final ActionDecElements pActionDec;
	private final OccurenceDecElements pOccurenceDec;
	private final DOUBLEElements pDOUBLE;
	private final ComponentModelElements pComponentModel;
	private final ComponentModelDecElements pComponentModelDec;
	private final SystemConnDecElements pSystemConnDec;
	private final SystemDecElements pSystemDec;
	private final AbstractFeaturesElements pAbstractFeatures;
	private final SystemPortDecElements pSystemPortDec;
	private final SystemPortInElements pSystemPortIn;
	private final SystemPortOutElements pSystemPortOut;
	private final CompConnDecElements pCompConnDec;
	private final ComponentImplElements pComponentImpl;
	private final ComponentTypeElements pComponentType;
	private final PortElements pPort;
	private final InPortElements pInPort;
	private final OutPortElements pOutPort;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DepModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDepModel = new DepModelElements();
		this.pAbstractModelDec = new AbstractModelDecElements();
		this.pPortType = new PortTypeElements();
		this.pErrorModes = new ErrorModesElements();
		this.pErrorModel = new ErrorModelElements();
		this.pEModelElement = new EModelElementElements();
		this.pStateDec = new StateDecElements();
		this.pEventDec = new EventDecElements();
		this.pTransitionFeatureDec = new TransitionFeatureDecElements();
		this.pTransitionState = new TransitionStateElements();
		this.pTriggerDec = new TriggerDecElements();
		this.pActionDec = new ActionDecElements();
		this.pOccurenceDec = new OccurenceDecElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pComponentModel = new ComponentModelElements();
		this.pComponentModelDec = new ComponentModelDecElements();
		this.pSystemConnDec = new SystemConnDecElements();
		this.pSystemDec = new SystemDecElements();
		this.pAbstractFeatures = new AbstractFeaturesElements();
		this.pSystemPortDec = new SystemPortDecElements();
		this.pSystemPortIn = new SystemPortInElements();
		this.pSystemPortOut = new SystemPortOutElements();
		this.pCompConnDec = new CompConnDecElements();
		this.pComponentImpl = new ComponentImplElements();
		this.pComponentType = new ComponentTypeElements();
		this.pPort = new PortElements();
		this.pInPort = new InPortElements();
		this.pOutPort = new OutPortElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.DepModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DepModel:
	//	depmodels+=abstractModelDec*;
	public DepModelElements getDepModelAccess() {
		return pDepModel;
	}
	
	public ParserRule getDepModelRule() {
		return getDepModelAccess().getRule();
	}
	
	//abstractModelDec:
	//	ComponentModel | ErrorModel | PortType;
	public AbstractModelDecElements getAbstractModelDecAccess() {
		return pAbstractModelDec;
	}
	
	public ParserRule getAbstractModelDecRule() {
		return getAbstractModelDecAccess().getRule();
	}
	
	//PortType:
	//	'port' 'type' name=ID '{'
	//	eModes=errorModes*
	//	'}';
	public PortTypeElements getPortTypeAccess() {
		return pPortType;
	}
	
	public ParserRule getPortTypeRule() {
		return getPortTypeAccess().getRule();
	}
	
	//errorModes:
	//	'error' 'mode' name=ID;
	public ErrorModesElements getErrorModesAccess() {
		return pErrorModes;
	}
	
	public ParserRule getErrorModesRule() {
		return getErrorModesAccess().getRule();
	}
	
	////Error model ************-
	//ErrorModel:
	//	'error' 'model' name=ID '{'
	//	emodelElements+=EModelElement*
	//	'}';
	public ErrorModelElements getErrorModelAccess() {
		return pErrorModel;
	}
	
	public ParserRule getErrorModelRule() {
		return getErrorModelAccess().getRule();
	}
	
	//EModelElement:
	//	StateDec | EventDec // | OuterPropagation
	//;
	public EModelElementElements getEModelElementAccess() {
		return pEModelElement;
	}
	
	public ParserRule getEModelElementRule() {
		return getEModelElementAccess().getRule();
	}
	
	/// *OuterPropagation:
	//	InPropDec | OutPropDec;
	//
	//InPropDec:
	//	'propagation in' name=ID 'trigger' affectedState=[EventDec];
	//
	//OutPropDec:
	//	'propagation out' name=ID 'action' fromState=[EventDec];* / StateDec:
	//	'error' 'state' name=ID;
	public StateDecElements getStateDecAccess() {
		return pStateDec;
	}
	
	public ParserRule getStateDecRule() {
		return getStateDecAccess().getRule();
	}
	
	//EventDec:
	//	'transition' name=ID '{'
	//	Features+=TransitionFeatureDec*
	//	'}';
	public EventDecElements getEventDecAccess() {
		return pEventDec;
	}
	
	public ParserRule getEventDecRule() {
		return getEventDecAccess().getRule();
	}
	
	//TransitionFeatureDec:
	//	TransitionState | TriggerDec | ActionDec | OccurenceDec;
	public TransitionFeatureDecElements getTransitionFeatureDecAccess() {
		return pTransitionFeatureDec;
	}
	
	public ParserRule getTransitionFeatureDecRule() {
		return getTransitionFeatureDecAccess().getRule();
	}
	
	//TransitionState:
	//	'states' ':' sourceState=[StateDec] '->' targetState=[StateDec];
	public TransitionStateElements getTransitionStateAccess() {
		return pTransitionState;
	}
	
	public ParserRule getTransitionStateRule() {
		return getTransitionStateAccess().getRule();
	}
	
	//TriggerDec:
	//	'trigger' name=ID portType=[Port] errorMode=[errorModes];
	public TriggerDecElements getTriggerDecAccess() {
		return pTriggerDec;
	}
	
	public ParserRule getTriggerDecRule() {
		return getTriggerDecAccess().getRule();
	}
	
	//ActionDec:
	//	'action' name=ID portType=[Port] errorMode=[errorModes];
	public ActionDecElements getActionDecAccess() {
		return pActionDec;
	}
	
	public ParserRule getActionDecRule() {
		return getActionDecAccess().getRule();
	}
	
	//OccurenceDec:
	//	'occurrence' DOUBLE;
	public OccurenceDecElements getOccurenceDecAccess() {
		return pOccurenceDec;
	}
	
	public ParserRule getOccurenceDecRule() {
		return getOccurenceDecAccess().getRule();
	}
	
	//DOUBLE:
	//	INT '.' INT;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	////Component model ***************
	// ComponentModel:
	//	elements+=ComponentModelDec+;
	public ComponentModelElements getComponentModelAccess() {
		return pComponentModel;
	}
	
	public ParserRule getComponentModelRule() {
		return getComponentModelAccess().getRule();
	}
	
	//ComponentModelDec:
	//	SystemDec | SystemConnDec;
	public ComponentModelDecElements getComponentModelDecAccess() {
		return pComponentModelDec;
	}
	
	public ParserRule getComponentModelDecRule() {
		return getComponentModelDecAccess().getRule();
	}
	
	//SystemConnDec:
	//	'system' 'connection' name=ID 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortDec] 'to'
	//	targetSystem=[SystemDec] '.' targetPort=[SystemPortDec];
	public SystemConnDecElements getSystemConnDecAccess() {
		return pSystemConnDec;
	}
	
	public ParserRule getSystemConnDecRule() {
		return getSystemConnDecAccess().getRule();
	}
	
	//SystemDec:
	//	'system' 'declaration' name=ID '{'
	//	sysFeatures+=AbstractFeatures*
	//	'}';
	public SystemDecElements getSystemDecAccess() {
		return pSystemDec;
	}
	
	public ParserRule getSystemDecRule() {
		return getSystemDecAccess().getRule();
	}
	
	//AbstractFeatures:
	//	ComponentType | ComponentImpl | CompConnDec | SystemPortDec;
	public AbstractFeaturesElements getAbstractFeaturesAccess() {
		return pAbstractFeatures;
	}
	
	public ParserRule getAbstractFeaturesRule() {
		return getAbstractFeaturesAccess().getRule();
	}
	
	//SystemPortDec:
	//	SystemPortIn | SystemPortOut;
	public SystemPortDecElements getSystemPortDecAccess() {
		return pSystemPortDec;
	}
	
	public ParserRule getSystemPortDecRule() {
		return getSystemPortDecAccess().getRule();
	}
	
	//SystemPortIn:
	//	'system' 'port' 'in' name=ID 'to' inComp=[ComponentImpl] '.' inPort=[InPort];
	public SystemPortInElements getSystemPortInAccess() {
		return pSystemPortIn;
	}
	
	public ParserRule getSystemPortInRule() {
		return getSystemPortInAccess().getRule();
	}
	
	//SystemPortOut:
	//	'system' 'port' 'out' name=ID 'from' outComp=[ComponentImpl] '.' outPort=[OutPort];
	public SystemPortOutElements getSystemPortOutAccess() {
		return pSystemPortOut;
	}
	
	public ParserRule getSystemPortOutRule() {
		return getSystemPortOutAccess().getRule();
	}
	
	//CompConnDec:
	//	'component' 'connection' name=ID 'from' sourceComp=[ComponentImpl] '.' sourcePort=[OutPort]
	//	'to' targetComp=[ComponentImpl] '.' targetPort=[InPort];
	public CompConnDecElements getCompConnDecAccess() {
		return pCompConnDec;
	}
	
	public ParserRule getCompConnDecRule() {
		return getCompConnDecAccess().getRule();
	}
	
	//ComponentImpl:
	//	'component' 'implementation' name=ID ':' superType=[ComponentType];
	public ComponentImplElements getComponentImplAccess() {
		return pComponentImpl;
	}
	
	public ParserRule getComponentImplRule() {
		return getComponentImplAccess().getRule();
	}
	
	//ComponentType:
	//	'component' 'type' name=ID '{'
	//	compFeatures+=Port*
	//	'}';
	public ComponentTypeElements getComponentTypeAccess() {
		return pComponentType;
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}
	
	//Port:
	//	InPort | OutPort;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//InPort:
	//	'port' 'instance' 'in' name=ID ':' superType=[PortType];
	public InPortElements getInPortAccess() {
		return pInPort;
	}
	
	public ParserRule getInPortRule() {
		return getInPortAccess().getRule();
	}
	
	//OutPort:
	//	'port' 'instance' 'out' name=ID ':' superType=[PortType];
	public OutPortElements getOutPortAccess() {
		return pOutPort;
	}
	
	public ParserRule getOutPortRule() {
		return getOutPortAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
