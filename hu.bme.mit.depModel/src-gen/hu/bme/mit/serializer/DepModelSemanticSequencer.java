/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.serializer;

import com.google.inject.Inject;
import hu.bme.mit.depModel.ActionDec;
import hu.bme.mit.depModel.CompConnDec;
import hu.bme.mit.depModel.ComponentImpl;
import hu.bme.mit.depModel.ComponentModel;
import hu.bme.mit.depModel.ComponentType;
import hu.bme.mit.depModel.DepModel;
import hu.bme.mit.depModel.DepModelPackage;
import hu.bme.mit.depModel.ErrorModel;
import hu.bme.mit.depModel.EventDec;
import hu.bme.mit.depModel.InPort;
import hu.bme.mit.depModel.OutPort;
import hu.bme.mit.depModel.PortType;
import hu.bme.mit.depModel.StateDec;
import hu.bme.mit.depModel.SystemConnDec;
import hu.bme.mit.depModel.SystemDec;
import hu.bme.mit.depModel.SystemPortIn;
import hu.bme.mit.depModel.SystemPortOut;
import hu.bme.mit.depModel.TransitionState;
import hu.bme.mit.depModel.TriggerDec;
import hu.bme.mit.depModel.errorModes;
import hu.bme.mit.services.DepModelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DepModelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DepModelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DepModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DepModelPackage.ACTION_DEC:
				sequence_ActionDec(context, (ActionDec) semanticObject); 
				return; 
			case DepModelPackage.COMP_CONN_DEC:
				sequence_CompConnDec(context, (CompConnDec) semanticObject); 
				return; 
			case DepModelPackage.COMPONENT_IMPL:
				sequence_ComponentImpl(context, (ComponentImpl) semanticObject); 
				return; 
			case DepModelPackage.COMPONENT_MODEL:
				sequence_ComponentModel(context, (ComponentModel) semanticObject); 
				return; 
			case DepModelPackage.COMPONENT_TYPE:
				sequence_ComponentType(context, (ComponentType) semanticObject); 
				return; 
			case DepModelPackage.DEP_MODEL:
				sequence_DepModel(context, (DepModel) semanticObject); 
				return; 
			case DepModelPackage.ERROR_MODEL:
				sequence_ErrorModel(context, (ErrorModel) semanticObject); 
				return; 
			case DepModelPackage.EVENT_DEC:
				sequence_EventDec(context, (EventDec) semanticObject); 
				return; 
			case DepModelPackage.IN_PORT:
				sequence_InPort(context, (InPort) semanticObject); 
				return; 
			case DepModelPackage.OUT_PORT:
				sequence_OutPort(context, (OutPort) semanticObject); 
				return; 
			case DepModelPackage.PORT_TYPE:
				sequence_PortType(context, (PortType) semanticObject); 
				return; 
			case DepModelPackage.STATE_DEC:
				sequence_StateDec(context, (StateDec) semanticObject); 
				return; 
			case DepModelPackage.SYSTEM_CONN_DEC:
				sequence_SystemConnDec(context, (SystemConnDec) semanticObject); 
				return; 
			case DepModelPackage.SYSTEM_DEC:
				sequence_SystemDec(context, (SystemDec) semanticObject); 
				return; 
			case DepModelPackage.SYSTEM_PORT_IN:
				sequence_SystemPortIn(context, (SystemPortIn) semanticObject); 
				return; 
			case DepModelPackage.SYSTEM_PORT_OUT:
				sequence_SystemPortOut(context, (SystemPortOut) semanticObject); 
				return; 
			case DepModelPackage.TRANSITION_STATE:
				sequence_TransitionState(context, (TransitionState) semanticObject); 
				return; 
			case DepModelPackage.TRIGGER_DEC:
				sequence_TriggerDec(context, (TriggerDec) semanticObject); 
				return; 
			case DepModelPackage.ERROR_MODES:
				sequence_errorModes(context, (errorModes) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TransitionFeatureDec returns ActionDec
	 *     ActionDec returns ActionDec
	 *
	 * Constraint:
	 *     (name=ID portType=[Port|ID] errorMode=[errorModes|ID])
	 */
	protected void sequence_ActionDec(ISerializationContext context, ActionDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.ACTION_DEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.ACTION_DEC__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.ACTION_DEC__PORT_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.ACTION_DEC__PORT_TYPE));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.ACTION_DEC__ERROR_MODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.ACTION_DEC__ERROR_MODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionDecAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getActionDecAccess().getPortTypePortIDTerminalRuleCall_2_0_1(), semanticObject.getPortType());
		feeder.accept(grammarAccess.getActionDecAccess().getErrorModeErrorModesIDTerminalRuleCall_3_0_1(), semanticObject.getErrorMode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFeatures returns CompConnDec
	 *     CompConnDec returns CompConnDec
	 *
	 * Constraint:
	 *     (name=ID sourceComp=[ComponentImpl|ID] sourcePort=[OutPort|ID] targetComp=[ComponentImpl|ID] targetPort=[InPort|ID])
	 */
	protected void sequence_CompConnDec(ISerializationContext context, CompConnDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.ABSTRACT_FEATURES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.ABSTRACT_FEATURES__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.COMP_CONN_DEC__SOURCE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.COMP_CONN_DEC__SOURCE_COMP));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.COMP_CONN_DEC__SOURCE_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.COMP_CONN_DEC__SOURCE_PORT));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.COMP_CONN_DEC__TARGET_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.COMP_CONN_DEC__TARGET_COMP));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.COMP_CONN_DEC__TARGET_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.COMP_CONN_DEC__TARGET_PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompConnDecAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCompConnDecAccess().getSourceCompComponentImplIDTerminalRuleCall_4_0_1(), semanticObject.getSourceComp());
		feeder.accept(grammarAccess.getCompConnDecAccess().getSourcePortOutPortIDTerminalRuleCall_6_0_1(), semanticObject.getSourcePort());
		feeder.accept(grammarAccess.getCompConnDecAccess().getTargetCompComponentImplIDTerminalRuleCall_8_0_1(), semanticObject.getTargetComp());
		feeder.accept(grammarAccess.getCompConnDecAccess().getTargetPortInPortIDTerminalRuleCall_10_0_1(), semanticObject.getTargetPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFeatures returns ComponentImpl
	 *     ComponentImpl returns ComponentImpl
	 *
	 * Constraint:
	 *     (name=ID superType=[ComponentType|ID])
	 */
	protected void sequence_ComponentImpl(ISerializationContext context, ComponentImpl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.ABSTRACT_FEATURES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.ABSTRACT_FEATURES__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.COMPONENT_IMPL__SUPER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.COMPONENT_IMPL__SUPER_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponentImplAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getComponentImplAccess().getSuperTypeComponentTypeIDTerminalRuleCall_4_0_1(), semanticObject.getSuperType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     abstractModelDec returns ComponentModel
	 *     ComponentModel returns ComponentModel
	 *
	 * Constraint:
	 *     elements+=ComponentModelDec+
	 */
	protected void sequence_ComponentModel(ISerializationContext context, ComponentModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFeatures returns ComponentType
	 *     ComponentType returns ComponentType
	 *
	 * Constraint:
	 *     (name=ID compFeatures+=Port*)
	 */
	protected void sequence_ComponentType(ISerializationContext context, ComponentType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DepModel returns DepModel
	 *
	 * Constraint:
	 *     depmodels+=abstractModelDec+
	 */
	protected void sequence_DepModel(ISerializationContext context, DepModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     abstractModelDec returns ErrorModel
	 *     ErrorModel returns ErrorModel
	 *
	 * Constraint:
	 *     (name=ID emodelElements+=EModelElement*)
	 */
	protected void sequence_ErrorModel(ISerializationContext context, ErrorModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EModelElement returns EventDec
	 *     EventDec returns EventDec
	 *
	 * Constraint:
	 *     (name=ID Features+=TransitionFeatureDec*)
	 */
	protected void sequence_EventDec(ISerializationContext context, EventDec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Port returns InPort
	 *     InPort returns InPort
	 *
	 * Constraint:
	 *     (name=ID superType=[PortType|ID])
	 */
	protected void sequence_InPort(ISerializationContext context, InPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.PORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.PORT__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.PORT__SUPER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.PORT__SUPER_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInPortAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInPortAccess().getSuperTypePortTypeIDTerminalRuleCall_5_0_1(), semanticObject.getSuperType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Port returns OutPort
	 *     OutPort returns OutPort
	 *
	 * Constraint:
	 *     (name=ID superType=[PortType|ID])
	 */
	protected void sequence_OutPort(ISerializationContext context, OutPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.PORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.PORT__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.PORT__SUPER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.PORT__SUPER_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutPortAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getOutPortAccess().getSuperTypePortTypeIDTerminalRuleCall_5_0_1(), semanticObject.getSuperType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     abstractModelDec returns PortType
	 *     PortType returns PortType
	 *
	 * Constraint:
	 *     (name=ID eModes=errorModes*)
	 */
	protected void sequence_PortType(ISerializationContext context, PortType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EModelElement returns StateDec
	 *     StateDec returns StateDec
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_StateDec(ISerializationContext context, StateDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.EMODEL_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.EMODEL_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateDecAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComponentModelDec returns SystemConnDec
	 *     SystemConnDec returns SystemConnDec
	 *
	 * Constraint:
	 *     (name=ID sourceSystem=[SystemDec|ID] sourcePort=[SystemPortDec|ID] targetSystem=[SystemDec|ID] targetPort=[SystemPortDec|ID])
	 */
	protected void sequence_SystemConnDec(ISerializationContext context, SystemConnDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.COMPONENT_MODEL_DEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.COMPONENT_MODEL_DEC__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.SYSTEM_CONN_DEC__SOURCE_SYSTEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.SYSTEM_CONN_DEC__SOURCE_SYSTEM));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.SYSTEM_CONN_DEC__SOURCE_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.SYSTEM_CONN_DEC__SOURCE_PORT));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.SYSTEM_CONN_DEC__TARGET_SYSTEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.SYSTEM_CONN_DEC__TARGET_SYSTEM));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.SYSTEM_CONN_DEC__TARGET_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.SYSTEM_CONN_DEC__TARGET_PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSystemConnDecAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSystemConnDecAccess().getSourceSystemSystemDecIDTerminalRuleCall_4_0_1(), semanticObject.getSourceSystem());
		feeder.accept(grammarAccess.getSystemConnDecAccess().getSourcePortSystemPortDecIDTerminalRuleCall_6_0_1(), semanticObject.getSourcePort());
		feeder.accept(grammarAccess.getSystemConnDecAccess().getTargetSystemSystemDecIDTerminalRuleCall_8_0_1(), semanticObject.getTargetSystem());
		feeder.accept(grammarAccess.getSystemConnDecAccess().getTargetPortSystemPortDecIDTerminalRuleCall_10_0_1(), semanticObject.getTargetPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComponentModelDec returns SystemDec
	 *     SystemDec returns SystemDec
	 *
	 * Constraint:
	 *     (name=ID sysFeatures+=AbstractFeatures*)
	 */
	protected void sequence_SystemDec(ISerializationContext context, SystemDec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFeatures returns SystemPortIn
	 *     SystemPortDec returns SystemPortIn
	 *     SystemPortIn returns SystemPortIn
	 *
	 * Constraint:
	 *     (name=ID inComp=[ComponentImpl|ID] inPort=[InPort|ID])
	 */
	protected void sequence_SystemPortIn(ISerializationContext context, SystemPortIn semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.ABSTRACT_FEATURES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.ABSTRACT_FEATURES__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.SYSTEM_PORT_IN__IN_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.SYSTEM_PORT_IN__IN_COMP));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.SYSTEM_PORT_IN__IN_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.SYSTEM_PORT_IN__IN_PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSystemPortInAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSystemPortInAccess().getInCompComponentImplIDTerminalRuleCall_5_0_1(), semanticObject.getInComp());
		feeder.accept(grammarAccess.getSystemPortInAccess().getInPortInPortIDTerminalRuleCall_7_0_1(), semanticObject.getInPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFeatures returns SystemPortOut
	 *     SystemPortDec returns SystemPortOut
	 *     SystemPortOut returns SystemPortOut
	 *
	 * Constraint:
	 *     (name=ID outComp=[ComponentImpl|ID] outPort=[OutPort|ID])
	 */
	protected void sequence_SystemPortOut(ISerializationContext context, SystemPortOut semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.ABSTRACT_FEATURES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.ABSTRACT_FEATURES__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.SYSTEM_PORT_OUT__OUT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.SYSTEM_PORT_OUT__OUT_COMP));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.SYSTEM_PORT_OUT__OUT_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.SYSTEM_PORT_OUT__OUT_PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSystemPortOutAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSystemPortOutAccess().getOutCompComponentImplIDTerminalRuleCall_5_0_1(), semanticObject.getOutComp());
		feeder.accept(grammarAccess.getSystemPortOutAccess().getOutPortOutPortIDTerminalRuleCall_7_0_1(), semanticObject.getOutPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionFeatureDec returns TransitionState
	 *     TransitionState returns TransitionState
	 *
	 * Constraint:
	 *     (sourceState=[StateDec|ID] targetState=[StateDec|ID])
	 */
	protected void sequence_TransitionState(ISerializationContext context, TransitionState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.TRANSITION_STATE__SOURCE_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.TRANSITION_STATE__SOURCE_STATE));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.TRANSITION_STATE__TARGET_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.TRANSITION_STATE__TARGET_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionStateAccess().getSourceStateStateDecIDTerminalRuleCall_2_0_1(), semanticObject.getSourceState());
		feeder.accept(grammarAccess.getTransitionStateAccess().getTargetStateStateDecIDTerminalRuleCall_4_0_1(), semanticObject.getTargetState());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionFeatureDec returns TriggerDec
	 *     TriggerDec returns TriggerDec
	 *
	 * Constraint:
	 *     (name=ID portType=[Port|ID] errorMode=[errorModes|ID])
	 */
	protected void sequence_TriggerDec(ISerializationContext context, TriggerDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.TRIGGER_DEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.TRIGGER_DEC__NAME));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.TRIGGER_DEC__PORT_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.TRIGGER_DEC__PORT_TYPE));
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.TRIGGER_DEC__ERROR_MODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.TRIGGER_DEC__ERROR_MODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTriggerDecAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTriggerDecAccess().getPortTypePortIDTerminalRuleCall_2_0_1(), semanticObject.getPortType());
		feeder.accept(grammarAccess.getTriggerDecAccess().getErrorModeErrorModesIDTerminalRuleCall_3_0_1(), semanticObject.getErrorMode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     errorModes returns errorModes
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_errorModes(ISerializationContext context, errorModes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DepModelPackage.Literals.ERROR_MODES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DepModelPackage.Literals.ERROR_MODES__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getErrorModesAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
