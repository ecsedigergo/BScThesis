/*
 * generated by Xtext 2.9.2
 */
grammar InternalErrorModel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.mit.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.services.ErrorModelGrammarAccess;

}

@parser::members {

 	private ErrorModelGrammarAccess grammarAccess;

    public InternalErrorModelParser(TokenStream input, ErrorModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ErrorModel";
   	}

   	@Override
   	protected ErrorModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleErrorModel
entryRuleErrorModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorModelRule()); }
	iv_ruleErrorModel=ruleErrorModel
	{ $current=$iv_ruleErrorModel.current; }
	EOF;

// Rule ErrorModel
ruleErrorModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getErrorModelAccess().getAbstractElementEModelDecParserRuleCall_0());
			}
			lv_AbstractElement_0_0=ruleEModelDec
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getErrorModelRule());
				}
				add(
					$current,
					"AbstractElement",
					lv_AbstractElement_0_0,
					"hu.bme.mit.ErrorModel.EModelDec");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleEModelDec
entryRuleEModelDec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEModelDecRule()); }
	iv_ruleEModelDec=ruleEModelDec
	{ $current=$iv_ruleEModelDec.current; }
	EOF;

// Rule EModelDec
ruleEModelDec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='error model'
		{
			newLeafNode(otherlv_0, grammarAccess.getEModelDecAccess().getErrorModelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEModelDecAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEModelDecRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.ErrorModel.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEModelDecAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEModelDecAccess().getEmodelElementsEModelElementParserRuleCall_3_0());
				}
				lv_emodelElements_3_0=ruleEModelElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEModelDecRule());
					}
					add(
						$current,
						"emodelElements",
						lv_emodelElements_3_0,
						"hu.bme.mit.ErrorModel.EModelElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEModelDecAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEModelElement
entryRuleEModelElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEModelElementRule()); }
	iv_ruleEModelElement=ruleEModelElement
	{ $current=$iv_ruleEModelElement.current; }
	EOF;

// Rule EModelElement
ruleEModelElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEModelElementAccess().getStateDecParserRuleCall_0());
		}
		this_StateDec_0=ruleStateDec
		{
			$current = $this_StateDec_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEModelElementAccess().getEventDecParserRuleCall_1());
		}
		this_EventDec_1=ruleEventDec
		{
			$current = $this_EventDec_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEModelElementAccess().getOuterPropagationParserRuleCall_2());
		}
		this_OuterPropagation_2=ruleOuterPropagation
		{
			$current = $this_OuterPropagation_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOuterPropagation
entryRuleOuterPropagation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOuterPropagationRule()); }
	iv_ruleOuterPropagation=ruleOuterPropagation
	{ $current=$iv_ruleOuterPropagation.current; }
	EOF;

// Rule OuterPropagation
ruleOuterPropagation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOuterPropagationAccess().getInPropDecParserRuleCall_0());
		}
		this_InPropDec_0=ruleInPropDec
		{
			$current = $this_InPropDec_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOuterPropagationAccess().getOutPropDecParserRuleCall_1());
		}
		this_OutPropDec_1=ruleOutPropDec
		{
			$current = $this_OutPropDec_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInPropDec
entryRuleInPropDec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInPropDecRule()); }
	iv_ruleInPropDec=ruleInPropDec
	{ $current=$iv_ruleInPropDec.current; }
	EOF;

// Rule InPropDec
ruleInPropDec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='propagation in'
		{
			newLeafNode(otherlv_0, grammarAccess.getInPropDecAccess().getPropagationInKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInPropDecAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInPropDecRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.ErrorModel.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='trigger'
		{
			newLeafNode(otherlv_2, grammarAccess.getInPropDecAccess().getTriggerKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInPropDecRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getInPropDecAccess().getAffectedStateEventDecCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleOutPropDec
entryRuleOutPropDec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutPropDecRule()); }
	iv_ruleOutPropDec=ruleOutPropDec
	{ $current=$iv_ruleOutPropDec.current; }
	EOF;

// Rule OutPropDec
ruleOutPropDec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='propagation out'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutPropDecAccess().getPropagationOutKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutPropDecAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutPropDecRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.ErrorModel.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='action'
		{
			newLeafNode(otherlv_2, grammarAccess.getOutPropDecAccess().getActionKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutPropDecRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getOutPropDecAccess().getFromStateEventDecCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleStateDec
entryRuleStateDec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateDecRule()); }
	iv_ruleStateDec=ruleStateDec
	{ $current=$iv_ruleStateDec.current; }
	EOF;

// Rule StateDec
ruleStateDec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='error state'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateDecAccess().getErrorStateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateDecAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateDecRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.ErrorModel.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEventDec
entryRuleEventDec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventDecRule()); }
	iv_ruleEventDec=ruleEventDec
	{ $current=$iv_ruleEventDec.current; }
	EOF;

// Rule EventDec
ruleEventDec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='transition'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventDecAccess().getTransitionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventDecAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventDecRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.ErrorModel.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEventDecAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventDecAccess().getFeaturesTransitionFeatureDecParserRuleCall_3_0());
				}
				lv_Features_3_0=ruleTransitionFeatureDec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventDecRule());
					}
					add(
						$current,
						"Features",
						lv_Features_3_0,
						"hu.bme.mit.ErrorModel.TransitionFeatureDec");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEventDecAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTransitionFeatureDec
entryRuleTransitionFeatureDec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionFeatureDecRule()); }
	iv_ruleTransitionFeatureDec=ruleTransitionFeatureDec
	{ $current=$iv_ruleTransitionFeatureDec.current; }
	EOF;

// Rule TransitionFeatureDec
ruleTransitionFeatureDec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTransitionFeatureDecAccess().getTransitionStateParserRuleCall_0());
		}
		this_TransitionState_0=ruleTransitionState
		{
			$current = $this_TransitionState_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransitionFeatureDecAccess().getTriggerDecParserRuleCall_1());
		}
		this_TriggerDec_1=ruleTriggerDec
		{
			$current = $this_TriggerDec_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransitionFeatureDecAccess().getActionDecParserRuleCall_2());
		}
		this_ActionDec_2=ruleActionDec
		{
			$current = $this_ActionDec_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransitionFeatureDecAccess().getOccurenceDecParserRuleCall_3());
		}
		ruleOccurenceDec
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTriggerDec
entryRuleTriggerDec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriggerDecRule()); }
	iv_ruleTriggerDec=ruleTriggerDec
	{ $current=$iv_ruleTriggerDec.current; }
	EOF;

// Rule TriggerDec
ruleTriggerDec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='trigger'
		{
			newLeafNode(otherlv_0, grammarAccess.getTriggerDecAccess().getTriggerKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTriggerDecAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriggerDecRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.ErrorModel.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActionDec
entryRuleActionDec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionDecRule()); }
	iv_ruleActionDec=ruleActionDec
	{ $current=$iv_ruleActionDec.current; }
	EOF;

// Rule ActionDec
ruleActionDec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='action'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionDecAccess().getActionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionDecAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionDecRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.ErrorModel.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOccurenceDec
entryRuleOccurenceDec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOccurenceDecRule()); }
	iv_ruleOccurenceDec=ruleOccurenceDec
	{ $current=$iv_ruleOccurenceDec.current.getText(); }
	EOF;

// Rule OccurenceDec
ruleOccurenceDec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='occurrence'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOccurenceDecAccess().getOccurrenceKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getOccurenceDecAccess().getDOUBLEParserRuleCall_1());
		}
		this_DOUBLE_1=ruleDOUBLE
		{
			$current.merge(this_DOUBLE_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); }
	iv_ruleDOUBLE=ruleDOUBLE
	{ $current=$iv_ruleDOUBLE.current.getText(); }
	EOF;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleTransitionState
entryRuleTransitionState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionStateRule()); }
	iv_ruleTransitionState=ruleTransitionState
	{ $current=$iv_ruleTransitionState.current; }
	EOF;

// Rule TransitionState
ruleTransitionState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='states'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransitionStateAccess().getStatesKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionStateAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionStateRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getTransitionStateAccess().getSourceStateStateDecCrossReference_2_0());
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getTransitionStateAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionStateRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getTransitionStateAccess().getTargetStateStateDecCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
