/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.scoping

import hu.bme.mit.errorModel.EModelDec
import hu.bme.mit.errorModel.ErrorModelPackage
import hu.bme.mit.errorModel.OuterPropagation
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ErrorModelScopeProvider extends AbstractErrorModelScopeProvider {
	/*override getScope(EObject context, EReference reference) {
		if (context instanceof EPropagationDec) {
			val prop = context as EPropagationDec
			if (reference == ErrorModelPackage.Literals.EPROPAGATION_DEC__SOURCE_PROP) {
				val eModelDec = EcoreUtil2.getContainerOfType(prop.sourceModel, EModelDec)
				if(eModelDec == null) return IScope.NULLSCOPE

				val props = EcoreUtil2.getAllContentsOfType(eModelDec, OuterPropagation)
				if (props == null) {
					return IScope.NULLSCOPE
				} else {
					return Scopes.scopeFor(props)
				}

			}

		}
		if (context instanceof EPropagationDec) {
			val prop = context as EPropagationDec
			if (reference == ErrorModelPackage.Literals.EPROPAGATION_DEC__TARGET_PROP) {
				val eModelDec = EcoreUtil2.getContainerOfType(prop.targetModel, EModelDec)
				if(eModelDec == null) return IScope.NULLSCOPE

				val props = EcoreUtil2.getAllContentsOfType(eModelDec, OuterPropagation)
				if (props == null) {
					return IScope.NULLSCOPE
				} else {
					return Scopes.scopeFor(props)
				}

			}

		}
		super.getScope(context, reference)
	}
*/




}
