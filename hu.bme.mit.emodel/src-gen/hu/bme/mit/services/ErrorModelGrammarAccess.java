/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ErrorModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ErrorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.ErrorModel");
		private final Assignment cAbstractElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAbstractElementErrorParserRuleCall_0 = (RuleCall)cAbstractElementAssignment.eContents().get(0);
		
		//ErrorModel:
		//	AbstractElement+=Error*;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractElement+=Error*
		public Assignment getAbstractElementAssignment() { return cAbstractElementAssignment; }
		
		//Error
		public RuleCall getAbstractElementErrorParserRuleCall_0() { return cAbstractElementErrorParserRuleCall_0; }
	}
	public class ErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.Error");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEModelDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEPropagationDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Error:
		//	EModelDec | EPropagationDec;
		@Override public ParserRule getRule() { return rule; }
		
		//EModelDec | EPropagationDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EModelDec
		public RuleCall getEModelDecParserRuleCall_0() { return cEModelDecParserRuleCall_0; }
		
		//EPropagationDec
		public RuleCall getEPropagationDecParserRuleCall_1() { return cEPropagationDecParserRuleCall_1; }
	}
	public class EPropagationDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.EPropagationDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorPropagationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceModelEModelDecCrossReference_3_0 = (CrossReference)cSourceModelAssignment_3.eContents().get(0);
		private final RuleCall cSourceModelEModelDecIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceModelEModelDecCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourcePropAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourcePropOutPropDecCrossReference_5_0 = (CrossReference)cSourcePropAssignment_5.eContents().get(0);
		private final RuleCall cSourcePropOutPropDecIDTerminalRuleCall_5_0_1 = (RuleCall)cSourcePropOutPropDecCrossReference_5_0.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetModelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetModelEModelDecCrossReference_7_0 = (CrossReference)cTargetModelAssignment_7.eContents().get(0);
		private final RuleCall cTargetModelEModelDecIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetModelEModelDecCrossReference_7_0.eContents().get(1);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetPropAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetPropInPropDecCrossReference_9_0 = (CrossReference)cTargetPropAssignment_9.eContents().get(0);
		private final RuleCall cTargetPropInPropDecIDTerminalRuleCall_9_0_1 = (RuleCall)cTargetPropInPropDecCrossReference_9_0.eContents().get(1);
		
		//EPropagationDec:
		//	'error propagation' name=QualifiedName 'from' sourceModel=[EModelDec] '.' sourceProp=[OutPropDec]
		//	'to' targetModel=[EModelDec] '.' targetProp=[InPropDec];
		@Override public ParserRule getRule() { return rule; }
		
		//'error propagation' name=QualifiedName 'from' sourceModel=[EModelDec] '.' sourceProp=[OutPropDec] 'to'
		//targetModel=[EModelDec] '.' targetProp=[InPropDec]
		public Group getGroup() { return cGroup; }
		
		//'error propagation'
		public Keyword getErrorPropagationKeyword_0() { return cErrorPropagationKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//sourceModel=[EModelDec]
		public Assignment getSourceModelAssignment_3() { return cSourceModelAssignment_3; }
		
		//[EModelDec]
		public CrossReference getSourceModelEModelDecCrossReference_3_0() { return cSourceModelEModelDecCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceModelEModelDecIDTerminalRuleCall_3_0_1() { return cSourceModelEModelDecIDTerminalRuleCall_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//sourceProp=[OutPropDec]
		public Assignment getSourcePropAssignment_5() { return cSourcePropAssignment_5; }
		
		//[OutPropDec]
		public CrossReference getSourcePropOutPropDecCrossReference_5_0() { return cSourcePropOutPropDecCrossReference_5_0; }
		
		//ID
		public RuleCall getSourcePropOutPropDecIDTerminalRuleCall_5_0_1() { return cSourcePropOutPropDecIDTerminalRuleCall_5_0_1; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//targetModel=[EModelDec]
		public Assignment getTargetModelAssignment_7() { return cTargetModelAssignment_7; }
		
		//[EModelDec]
		public CrossReference getTargetModelEModelDecCrossReference_7_0() { return cTargetModelEModelDecCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetModelEModelDecIDTerminalRuleCall_7_0_1() { return cTargetModelEModelDecIDTerminalRuleCall_7_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }
		
		//targetProp=[InPropDec]
		public Assignment getTargetPropAssignment_9() { return cTargetPropAssignment_9; }
		
		//[InPropDec]
		public CrossReference getTargetPropInPropDecCrossReference_9_0() { return cTargetPropInPropDecCrossReference_9_0; }
		
		//ID
		public RuleCall getTargetPropInPropDecIDTerminalRuleCall_9_0_1() { return cTargetPropInPropDecIDTerminalRuleCall_9_0_1; }
	}
	public class EModelDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.EModelDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEmodelElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEmodelElementsEModelElementParserRuleCall_3_0 = (RuleCall)cEmodelElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EModelDec:
		//	'error model' name=QualifiedName '{'
		//	emodelElements+=EModelElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'error model' name=QualifiedName '{' emodelElements+=EModelElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'error model'
		public Keyword getErrorModelKeyword_0() { return cErrorModelKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//emodelElements+=EModelElement*
		public Assignment getEmodelElementsAssignment_3() { return cEmodelElementsAssignment_3; }
		
		//EModelElement
		public RuleCall getEmodelElementsEModelElementParserRuleCall_3_0() { return cEmodelElementsEModelElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.EModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOuterPropagationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EModelElement:
		//	StateDec | EventDec | OuterPropagation;
		@Override public ParserRule getRule() { return rule; }
		
		//StateDec | EventDec | OuterPropagation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StateDec
		public RuleCall getStateDecParserRuleCall_0() { return cStateDecParserRuleCall_0; }
		
		//EventDec
		public RuleCall getEventDecParserRuleCall_1() { return cEventDecParserRuleCall_1; }
		
		//OuterPropagation
		public RuleCall getOuterPropagationParserRuleCall_2() { return cOuterPropagationParserRuleCall_2; }
	}
	public class OuterPropagationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.OuterPropagation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInPropDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutPropDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OuterPropagation:
		//	InPropDec | OutPropDec;
		@Override public ParserRule getRule() { return rule; }
		
		//InPropDec | OutPropDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InPropDec
		public RuleCall getInPropDecParserRuleCall_0() { return cInPropDecParserRuleCall_0; }
		
		//OutPropDec
		public RuleCall getOutPropDecParserRuleCall_1() { return cOutPropDecParserRuleCall_1; }
	}
	public class InPropDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.InPropDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropagationInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAffectedStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAffectedStateEventDecCrossReference_3_0 = (CrossReference)cAffectedStateAssignment_3.eContents().get(0);
		private final RuleCall cAffectedStateEventDecIDTerminalRuleCall_3_0_1 = (RuleCall)cAffectedStateEventDecCrossReference_3_0.eContents().get(1);
		
		//InPropDec:
		//	'propagation in' name=QualifiedName '->' affectedState=[EventDec];
		@Override public ParserRule getRule() { return rule; }
		
		//'propagation in' name=QualifiedName '->' affectedState=[EventDec]
		public Group getGroup() { return cGroup; }
		
		//'propagation in'
		public Keyword getPropagationInKeyword_0() { return cPropagationInKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//affectedState=[EventDec]
		public Assignment getAffectedStateAssignment_3() { return cAffectedStateAssignment_3; }
		
		//[EventDec]
		public CrossReference getAffectedStateEventDecCrossReference_3_0() { return cAffectedStateEventDecCrossReference_3_0; }
		
		//ID
		public RuleCall getAffectedStateEventDecIDTerminalRuleCall_3_0_1() { return cAffectedStateEventDecIDTerminalRuleCall_3_0_1; }
	}
	public class OutPropDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.OutPropDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropagationOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromStateEventDecCrossReference_3_0 = (CrossReference)cFromStateAssignment_3.eContents().get(0);
		private final RuleCall cFromStateEventDecIDTerminalRuleCall_3_0_1 = (RuleCall)cFromStateEventDecCrossReference_3_0.eContents().get(1);
		
		//OutPropDec:
		//	'propagation out' name=QualifiedName '<-' fromState=[EventDec];
		@Override public ParserRule getRule() { return rule; }
		
		//'propagation out' name=QualifiedName '<-' fromState=[EventDec]
		public Group getGroup() { return cGroup; }
		
		//'propagation out'
		public Keyword getPropagationOutKeyword_0() { return cPropagationOutKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_2() { return cLessThanSignHyphenMinusKeyword_2; }
		
		//fromState=[EventDec]
		public Assignment getFromStateAssignment_3() { return cFromStateAssignment_3; }
		
		//[EventDec]
		public CrossReference getFromStateEventDecCrossReference_3_0() { return cFromStateEventDecCrossReference_3_0; }
		
		//ID
		public RuleCall getFromStateEventDecIDTerminalRuleCall_3_0_1() { return cFromStateEventDecIDTerminalRuleCall_3_0_1; }
	}
	public class StateDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.StateDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StateDec:
		//	'error state' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'error state' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'error state'
		public Keyword getErrorStateKeyword_0() { return cErrorStateKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class EventDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.EventDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventFeaturesEventFeatureParserRuleCall_3_0 = (RuleCall)cEventFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EventDec:
		//	'error event' name=QualifiedName '{'
		//	eventFeatures+=EventFeature*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'error event' name=QualifiedName '{' eventFeatures+=EventFeature* '}'
		public Group getGroup() { return cGroup; }
		
		//'error event'
		public Keyword getErrorEventKeyword_0() { return cErrorEventKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//eventFeatures+=EventFeature*
		public Assignment getEventFeaturesAssignment_3() { return cEventFeaturesAssignment_3; }
		
		//EventFeature
		public RuleCall getEventFeaturesEventFeatureParserRuleCall_3_0() { return cEventFeaturesEventFeatureParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EventFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.EventFeature");
		private final RuleCall cEventStateParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EventFeature:
		//	EventState;
		@Override public ParserRule getRule() { return rule; }
		
		//EventState
		public RuleCall getEventStateParserRuleCall() { return cEventStateParserRuleCall; }
	}
	public class OccurenceDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.OccurenceDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOccurrenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDOUBLEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OccurenceDec:
		//	'occurrence' DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'occurrence' DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'occurrence'
		public Keyword getOccurrenceKeyword_0() { return cOccurrenceKeyword_0; }
		
		//DOUBLE
		public RuleCall getDOUBLEParserRuleCall_1() { return cDOUBLEParserRuleCall_1; }
	}
	public class EventStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.EventState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceStateStateDecCrossReference_2_0 = (CrossReference)cSourceStateAssignment_2.eContents().get(0);
		private final RuleCall cSourceStateStateDecIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceStateStateDecCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateStateDecCrossReference_4_0 = (CrossReference)cTargetStateAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateStateDecIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateStateDecCrossReference_4_0.eContents().get(1);
		
		//EventState:
		//	'states' ':' sourceState=[StateDec] '->' targetState=[StateDec];
		@Override public ParserRule getRule() { return rule; }
		
		//'states' ':' sourceState=[StateDec] '->' targetState=[StateDec]
		public Group getGroup() { return cGroup; }
		
		//'states'
		public Keyword getStatesKeyword_0() { return cStatesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//sourceState=[StateDec]
		public Assignment getSourceStateAssignment_2() { return cSourceStateAssignment_2; }
		
		//[StateDec]
		public CrossReference getSourceStateStateDecCrossReference_2_0() { return cSourceStateStateDecCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceStateStateDecIDTerminalRuleCall_2_0_1() { return cSourceStateStateDecIDTerminalRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//targetState=[StateDec]
		public Assignment getTargetStateAssignment_4() { return cTargetStateAssignment_4; }
		
		//[StateDec]
		public CrossReference getTargetStateStateDecCrossReference_4_0() { return cTargetStateStateDecCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateStateDecIDTerminalRuleCall_4_0_1() { return cTargetStateStateDecIDTerminalRuleCall_4_0_1; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ErrorModel.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ErrorModelElements pErrorModel;
	private final ErrorElements pError;
	private final EPropagationDecElements pEPropagationDec;
	private final EModelDecElements pEModelDec;
	private final EModelElementElements pEModelElement;
	private final OuterPropagationElements pOuterPropagation;
	private final InPropDecElements pInPropDec;
	private final OutPropDecElements pOutPropDec;
	private final StateDecElements pStateDec;
	private final EventDecElements pEventDec;
	private final EventFeatureElements pEventFeature;
	private final OccurenceDecElements pOccurenceDec;
	private final EventStateElements pEventState;
	private final DOUBLEElements pDOUBLE;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ErrorModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pErrorModel = new ErrorModelElements();
		this.pError = new ErrorElements();
		this.pEPropagationDec = new EPropagationDecElements();
		this.pEModelDec = new EModelDecElements();
		this.pEModelElement = new EModelElementElements();
		this.pOuterPropagation = new OuterPropagationElements();
		this.pInPropDec = new InPropDecElements();
		this.pOutPropDec = new OutPropDecElements();
		this.pStateDec = new StateDecElements();
		this.pEventDec = new EventDecElements();
		this.pEventFeature = new EventFeatureElements();
		this.pOccurenceDec = new OccurenceDecElements();
		this.pEventState = new EventStateElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.ErrorModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ErrorModel:
	//	AbstractElement+=Error*;
	public ErrorModelElements getErrorModelAccess() {
		return pErrorModel;
	}
	
	public ParserRule getErrorModelRule() {
		return getErrorModelAccess().getRule();
	}
	
	//Error:
	//	EModelDec | EPropagationDec;
	public ErrorElements getErrorAccess() {
		return pError;
	}
	
	public ParserRule getErrorRule() {
		return getErrorAccess().getRule();
	}
	
	//EPropagationDec:
	//	'error propagation' name=QualifiedName 'from' sourceModel=[EModelDec] '.' sourceProp=[OutPropDec]
	//	'to' targetModel=[EModelDec] '.' targetProp=[InPropDec];
	public EPropagationDecElements getEPropagationDecAccess() {
		return pEPropagationDec;
	}
	
	public ParserRule getEPropagationDecRule() {
		return getEPropagationDecAccess().getRule();
	}
	
	//EModelDec:
	//	'error model' name=QualifiedName '{'
	//	emodelElements+=EModelElement*
	//	'}';
	public EModelDecElements getEModelDecAccess() {
		return pEModelDec;
	}
	
	public ParserRule getEModelDecRule() {
		return getEModelDecAccess().getRule();
	}
	
	//EModelElement:
	//	StateDec | EventDec | OuterPropagation;
	public EModelElementElements getEModelElementAccess() {
		return pEModelElement;
	}
	
	public ParserRule getEModelElementRule() {
		return getEModelElementAccess().getRule();
	}
	
	//OuterPropagation:
	//	InPropDec | OutPropDec;
	public OuterPropagationElements getOuterPropagationAccess() {
		return pOuterPropagation;
	}
	
	public ParserRule getOuterPropagationRule() {
		return getOuterPropagationAccess().getRule();
	}
	
	//InPropDec:
	//	'propagation in' name=QualifiedName '->' affectedState=[EventDec];
	public InPropDecElements getInPropDecAccess() {
		return pInPropDec;
	}
	
	public ParserRule getInPropDecRule() {
		return getInPropDecAccess().getRule();
	}
	
	//OutPropDec:
	//	'propagation out' name=QualifiedName '<-' fromState=[EventDec];
	public OutPropDecElements getOutPropDecAccess() {
		return pOutPropDec;
	}
	
	public ParserRule getOutPropDecRule() {
		return getOutPropDecAccess().getRule();
	}
	
	//StateDec:
	//	'error state' name=QualifiedName;
	public StateDecElements getStateDecAccess() {
		return pStateDec;
	}
	
	public ParserRule getStateDecRule() {
		return getStateDecAccess().getRule();
	}
	
	//EventDec:
	//	'error event' name=QualifiedName '{'
	//	eventFeatures+=EventFeature*
	//	'}';
	public EventDecElements getEventDecAccess() {
		return pEventDec;
	}
	
	public ParserRule getEventDecRule() {
		return getEventDecAccess().getRule();
	}
	
	//EventFeature:
	//	EventState;
	public EventFeatureElements getEventFeatureAccess() {
		return pEventFeature;
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}
	
	//OccurenceDec:
	//	'occurrence' DOUBLE;
	public OccurenceDecElements getOccurenceDecAccess() {
		return pOccurenceDec;
	}
	
	public ParserRule getOccurenceDecRule() {
		return getOccurenceDecAccess().getRule();
	}
	
	//EventState:
	//	'states' ':' sourceState=[StateDec] '->' targetState=[StateDec];
	public EventStateElements getEventStateAccess() {
		return pEventState;
	}
	
	public ParserRule getEventStateRule() {
		return getEventStateAccess().getRule();
	}
	
	//DOUBLE:
	//	INT '.' INT;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
