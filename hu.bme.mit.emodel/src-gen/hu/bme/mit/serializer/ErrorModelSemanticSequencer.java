/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.serializer;

import com.google.inject.Inject;
import hu.bme.mit.errorModel.ActionDec;
import hu.bme.mit.errorModel.EModelDec;
import hu.bme.mit.errorModel.ErrorModel;
import hu.bme.mit.errorModel.ErrorModelPackage;
import hu.bme.mit.errorModel.EventDec;
import hu.bme.mit.errorModel.InPropDec;
import hu.bme.mit.errorModel.OutPropDec;
import hu.bme.mit.errorModel.StateDec;
import hu.bme.mit.errorModel.TransitionState;
import hu.bme.mit.errorModel.TriggerDec;
import hu.bme.mit.services.ErrorModelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ErrorModelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ErrorModelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ErrorModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ErrorModelPackage.ACTION_DEC:
				sequence_ActionDec(context, (ActionDec) semanticObject); 
				return; 
			case ErrorModelPackage.EMODEL_DEC:
				sequence_EModelDec(context, (EModelDec) semanticObject); 
				return; 
			case ErrorModelPackage.ERROR_MODEL:
				sequence_ErrorModel(context, (ErrorModel) semanticObject); 
				return; 
			case ErrorModelPackage.EVENT_DEC:
				sequence_EventDec(context, (EventDec) semanticObject); 
				return; 
			case ErrorModelPackage.IN_PROP_DEC:
				sequence_InPropDec(context, (InPropDec) semanticObject); 
				return; 
			case ErrorModelPackage.OUT_PROP_DEC:
				sequence_OutPropDec(context, (OutPropDec) semanticObject); 
				return; 
			case ErrorModelPackage.STATE_DEC:
				sequence_StateDec(context, (StateDec) semanticObject); 
				return; 
			case ErrorModelPackage.TRANSITION_STATE:
				sequence_TransitionState(context, (TransitionState) semanticObject); 
				return; 
			case ErrorModelPackage.TRIGGER_DEC:
				sequence_TriggerDec(context, (TriggerDec) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TransitionFeatureDec returns ActionDec
	 *     ActionDec returns ActionDec
	 *
	 * Constraint:
	 *     name=QualifiedName
	 */
	protected void sequence_ActionDec(ISerializationContext context, ActionDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.ACTION_DEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.ACTION_DEC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionDecAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EModelDec returns EModelDec
	 *
	 * Constraint:
	 *     (name=QualifiedName emodelElements+=EModelElement*)
	 */
	protected void sequence_EModelDec(ISerializationContext context, EModelDec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ErrorModel returns ErrorModel
	 *
	 * Constraint:
	 *     AbstractElement+=EModelDec+
	 */
	protected void sequence_ErrorModel(ISerializationContext context, ErrorModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EModelElement returns EventDec
	 *     EventDec returns EventDec
	 *
	 * Constraint:
	 *     (name=QualifiedName Features+=TransitionFeatureDec*)
	 */
	protected void sequence_EventDec(ISerializationContext context, EventDec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EModelElement returns InPropDec
	 *     OuterPropagation returns InPropDec
	 *     InPropDec returns InPropDec
	 *
	 * Constraint:
	 *     (name=QualifiedName affectedState=[EventDec|ID])
	 */
	protected void sequence_InPropDec(ISerializationContext context, InPropDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.EMODEL_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.EMODEL_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.IN_PROP_DEC__AFFECTED_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.IN_PROP_DEC__AFFECTED_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInPropDecAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInPropDecAccess().getAffectedStateEventDecIDTerminalRuleCall_3_0_1(), semanticObject.getAffectedState());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EModelElement returns OutPropDec
	 *     OuterPropagation returns OutPropDec
	 *     OutPropDec returns OutPropDec
	 *
	 * Constraint:
	 *     (name=QualifiedName fromState=[EventDec|ID])
	 */
	protected void sequence_OutPropDec(ISerializationContext context, OutPropDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.EMODEL_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.EMODEL_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.OUT_PROP_DEC__FROM_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.OUT_PROP_DEC__FROM_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutPropDecAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getOutPropDecAccess().getFromStateEventDecIDTerminalRuleCall_3_0_1(), semanticObject.getFromState());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EModelElement returns StateDec
	 *     StateDec returns StateDec
	 *
	 * Constraint:
	 *     name=QualifiedName
	 */
	protected void sequence_StateDec(ISerializationContext context, StateDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.EMODEL_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.EMODEL_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateDecAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionFeatureDec returns TransitionState
	 *     TransitionState returns TransitionState
	 *
	 * Constraint:
	 *     (sourceState=[StateDec|ID] targetState=[StateDec|ID])
	 */
	protected void sequence_TransitionState(ISerializationContext context, TransitionState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.TRANSITION_STATE__SOURCE_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.TRANSITION_STATE__SOURCE_STATE));
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.TRANSITION_STATE__TARGET_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.TRANSITION_STATE__TARGET_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionStateAccess().getSourceStateStateDecIDTerminalRuleCall_2_0_1(), semanticObject.getSourceState());
		feeder.accept(grammarAccess.getTransitionStateAccess().getTargetStateStateDecIDTerminalRuleCall_4_0_1(), semanticObject.getTargetState());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionFeatureDec returns TriggerDec
	 *     TriggerDec returns TriggerDec
	 *
	 * Constraint:
	 *     name=QualifiedName
	 */
	protected void sequence_TriggerDec(ISerializationContext context, TriggerDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErrorModelPackage.Literals.TRIGGER_DEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErrorModelPackage.Literals.TRIGGER_DEC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTriggerDecAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
