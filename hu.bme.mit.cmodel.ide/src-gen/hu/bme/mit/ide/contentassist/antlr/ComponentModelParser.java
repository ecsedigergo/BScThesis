/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.ide.contentassist.antlr;

import com.google.inject.Inject;
import hu.bme.mit.ide.contentassist.antlr.internal.InternalComponentModelParser;
import hu.bme.mit.services.ComponentModelGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ComponentModelParser extends AbstractContentAssistParser {

	@Inject
	private ComponentModelGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalComponentModelParser createParser() {
		InternalComponentModelParser result = new InternalComponentModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getComponentModelDecAccess().getAlternatives(), "rule__ComponentModelDec__Alternatives");
					put(grammarAccess.getAbstractFeaturesAccess().getAlternatives(), "rule__AbstractFeatures__Alternatives");
					put(grammarAccess.getSystemPortDecAccess().getAlternatives(), "rule__SystemPortDec__Alternatives");
					put(grammarAccess.getAbstractComponentFeaturesAccess().getAlternatives(), "rule__AbstractComponentFeatures__Alternatives");
					put(grammarAccess.getPortAccess().getAlternatives(), "rule__Port__Alternatives");
					put(grammarAccess.getEModelElementAccess().getAlternatives(), "rule__EModelElement__Alternatives");
					put(grammarAccess.getTransitionFeatureDecAccess().getAlternatives(), "rule__TransitionFeatureDec__Alternatives");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getPortTypeAccess().getGroup(), "rule__PortType__Group__0");
					put(grammarAccess.getErrorModesAccess().getGroup(), "rule__ErrorModes__Group__0");
					put(grammarAccess.getSystemConnDecAccess().getGroup(), "rule__SystemConnDec__Group__0");
					put(grammarAccess.getSystemDecAccess().getGroup(), "rule__SystemDec__Group__0");
					put(grammarAccess.getSystemPortInAccess().getGroup(), "rule__SystemPortIn__Group__0");
					put(grammarAccess.getSystemPortOutAccess().getGroup(), "rule__SystemPortOut__Group__0");
					put(grammarAccess.getCompConnDecAccess().getGroup(), "rule__CompConnDec__Group__0");
					put(grammarAccess.getComponentImplAccess().getGroup(), "rule__ComponentImpl__Group__0");
					put(grammarAccess.getComponentTypeAccess().getGroup(), "rule__ComponentType__Group__0");
					put(grammarAccess.getInPortAccess().getGroup(), "rule__InPort__Group__0");
					put(grammarAccess.getOutPortAccess().getGroup(), "rule__OutPort__Group__0");
					put(grammarAccess.getEModelDecAccess().getGroup(), "rule__EModelDec__Group__0");
					put(grammarAccess.getStateDecAccess().getGroup(), "rule__StateDec__Group__0");
					put(grammarAccess.getTransitionDecAccess().getGroup(), "rule__TransitionDec__Group__0");
					put(grammarAccess.getTransitionFeatureDecAccess().getGroup_3(), "rule__TransitionFeatureDec__Group_3__0");
					put(grammarAccess.getTransitionStateAccess().getGroup(), "rule__TransitionState__Group__0");
					put(grammarAccess.getTriggerDecAccess().getGroup(), "rule__TriggerDec__Group__0");
					put(grammarAccess.getActionDecAccess().getGroup(), "rule__ActionDec__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getComponentModelAccess().getElementsAssignment(), "rule__ComponentModel__ElementsAssignment");
					put(grammarAccess.getPortTypeAccess().getNameAssignment_2(), "rule__PortType__NameAssignment_2");
					put(grammarAccess.getPortTypeAccess().getEModesAssignment_4(), "rule__PortType__EModesAssignment_4");
					put(grammarAccess.getErrorModesAccess().getNameAssignment_2(), "rule__ErrorModes__NameAssignment_2");
					put(grammarAccess.getSystemConnDecAccess().getNameAssignment_2(), "rule__SystemConnDec__NameAssignment_2");
					put(grammarAccess.getSystemConnDecAccess().getSourceSystemAssignment_4(), "rule__SystemConnDec__SourceSystemAssignment_4");
					put(grammarAccess.getSystemConnDecAccess().getSourcePortAssignment_6(), "rule__SystemConnDec__SourcePortAssignment_6");
					put(grammarAccess.getSystemConnDecAccess().getTargetSystemAssignment_8(), "rule__SystemConnDec__TargetSystemAssignment_8");
					put(grammarAccess.getSystemConnDecAccess().getTargetPortAssignment_10(), "rule__SystemConnDec__TargetPortAssignment_10");
					put(grammarAccess.getSystemDecAccess().getNameAssignment_2(), "rule__SystemDec__NameAssignment_2");
					put(grammarAccess.getSystemDecAccess().getSysFeaturesAssignment_4(), "rule__SystemDec__SysFeaturesAssignment_4");
					put(grammarAccess.getSystemPortInAccess().getNameAssignment_3(), "rule__SystemPortIn__NameAssignment_3");
					put(grammarAccess.getSystemPortInAccess().getInCompAssignment_5(), "rule__SystemPortIn__InCompAssignment_5");
					put(grammarAccess.getSystemPortInAccess().getInPortAssignment_7(), "rule__SystemPortIn__InPortAssignment_7");
					put(grammarAccess.getSystemPortOutAccess().getNameAssignment_3(), "rule__SystemPortOut__NameAssignment_3");
					put(grammarAccess.getSystemPortOutAccess().getOutCompAssignment_5(), "rule__SystemPortOut__OutCompAssignment_5");
					put(grammarAccess.getSystemPortOutAccess().getOutPortAssignment_7(), "rule__SystemPortOut__OutPortAssignment_7");
					put(grammarAccess.getCompConnDecAccess().getNameAssignment_2(), "rule__CompConnDec__NameAssignment_2");
					put(grammarAccess.getCompConnDecAccess().getSourceCompAssignment_4(), "rule__CompConnDec__SourceCompAssignment_4");
					put(grammarAccess.getCompConnDecAccess().getSourcePortAssignment_6(), "rule__CompConnDec__SourcePortAssignment_6");
					put(grammarAccess.getCompConnDecAccess().getTargetCompAssignment_8(), "rule__CompConnDec__TargetCompAssignment_8");
					put(grammarAccess.getCompConnDecAccess().getTargetPortAssignment_10(), "rule__CompConnDec__TargetPortAssignment_10");
					put(grammarAccess.getComponentImplAccess().getNameAssignment_2(), "rule__ComponentImpl__NameAssignment_2");
					put(grammarAccess.getComponentImplAccess().getSuperTypeAssignment_4(), "rule__ComponentImpl__SuperTypeAssignment_4");
					put(grammarAccess.getComponentTypeAccess().getNameAssignment_2(), "rule__ComponentType__NameAssignment_2");
					put(grammarAccess.getComponentTypeAccess().getComponentFeaturesAssignment_4(), "rule__ComponentType__ComponentFeaturesAssignment_4");
					put(grammarAccess.getInPortAccess().getNameInPortAssignment_3(), "rule__InPort__NameInPortAssignment_3");
					put(grammarAccess.getInPortAccess().getSuperTypeAssignment_5(), "rule__InPort__SuperTypeAssignment_5");
					put(grammarAccess.getOutPortAccess().getNameOutPortAssignment_3(), "rule__OutPort__NameOutPortAssignment_3");
					put(grammarAccess.getOutPortAccess().getSuperTypeAssignment_5(), "rule__OutPort__SuperTypeAssignment_5");
					put(grammarAccess.getEModelDecAccess().getNameEModelDecAssignment_2(), "rule__EModelDec__NameEModelDecAssignment_2");
					put(grammarAccess.getEModelDecAccess().getEmodelElementsAssignment_4(), "rule__EModelDec__EmodelElementsAssignment_4");
					put(grammarAccess.getStateDecAccess().getNameStateDecAssignment_2(), "rule__StateDec__NameStateDecAssignment_2");
					put(grammarAccess.getTransitionDecAccess().getNameEventDecAssignment_1(), "rule__TransitionDec__NameEventDecAssignment_1");
					put(grammarAccess.getTransitionDecAccess().getFeaturesAssignment_3(), "rule__TransitionDec__FeaturesAssignment_3");
					put(grammarAccess.getTransitionStateAccess().getSourceStateAssignment_1(), "rule__TransitionState__SourceStateAssignment_1");
					put(grammarAccess.getTransitionStateAccess().getTargetStateAssignment_3(), "rule__TransitionState__TargetStateAssignment_3");
					put(grammarAccess.getTriggerDecAccess().getNameAssignment_1(), "rule__TriggerDec__NameAssignment_1");
					put(grammarAccess.getTriggerDecAccess().getPortInstanceAssignment_3(), "rule__TriggerDec__PortInstanceAssignment_3");
					put(grammarAccess.getTriggerDecAccess().getErrorModeAssignment_5(), "rule__TriggerDec__ErrorModeAssignment_5");
					put(grammarAccess.getActionDecAccess().getNameAssignment_1(), "rule__ActionDec__NameAssignment_1");
					put(grammarAccess.getActionDecAccess().getPortInstanceAssignment_3(), "rule__ActionDec__PortInstanceAssignment_3");
					put(grammarAccess.getActionDecAccess().getErrorModeAssignment_5(), "rule__ActionDec__ErrorModeAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalComponentModelParser typedParser = (InternalComponentModelParser) parser;
			typedParser.entryRuleComponentModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ComponentModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ComponentModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
