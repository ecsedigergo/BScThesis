/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.ide.contentassist.antlr;

import com.google.inject.Inject;
import hu.bme.mit.ide.contentassist.antlr.internal.InternalComponentModelParser;
import hu.bme.mit.services.ComponentModelGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ComponentModelParser extends AbstractContentAssistParser {

	@Inject
	private ComponentModelGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalComponentModelParser createParser() {
		InternalComponentModelParser result = new InternalComponentModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getAbstractFeaturesAccess().getAlternatives(), "rule__AbstractFeatures__Alternatives");
					put(grammarAccess.getSystemPortDecAccess().getAlternatives(), "rule__SystemPortDec__Alternatives");
					put(grammarAccess.getPortAccess().getAlternatives(), "rule__Port__Alternatives");
					put(grammarAccess.getSystemConnDecAccess().getGroup(), "rule__SystemConnDec__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getSystemDecAccess().getGroup(), "rule__SystemDec__Group__0");
					put(grammarAccess.getSystemPortInAccess().getGroup(), "rule__SystemPortIn__Group__0");
					put(grammarAccess.getSystemPortOutAccess().getGroup(), "rule__SystemPortOut__Group__0");
					put(grammarAccess.getCompConnDecAccess().getGroup(), "rule__CompConnDec__Group__0");
					put(grammarAccess.getComponentImplAccess().getGroup(), "rule__ComponentImpl__Group__0");
					put(grammarAccess.getComponentTypeAccess().getGroup(), "rule__ComponentType__Group__0");
					put(grammarAccess.getInPortAccess().getGroup(), "rule__InPort__Group__0");
					put(grammarAccess.getOutPortAccess().getGroup(), "rule__OutPort__Group__0");
					put(grammarAccess.getPortTypeAccess().getGroup(), "rule__PortType__Group__0");
					put(grammarAccess.getErrorModesAccess().getGroup(), "rule__ErrorModes__Group__0");
					put(grammarAccess.getComponentModelAccess().getElementsAssignment(), "rule__ComponentModel__ElementsAssignment");
					put(grammarAccess.getSystemConnDecAccess().getNameAssignment_1(), "rule__SystemConnDec__NameAssignment_1");
					put(grammarAccess.getSystemConnDecAccess().getSourceSystemAssignment_3(), "rule__SystemConnDec__SourceSystemAssignment_3");
					put(grammarAccess.getSystemConnDecAccess().getSourcePortAssignment_5(), "rule__SystemConnDec__SourcePortAssignment_5");
					put(grammarAccess.getSystemConnDecAccess().getTargetSystemAssignment_7(), "rule__SystemConnDec__TargetSystemAssignment_7");
					put(grammarAccess.getSystemConnDecAccess().getTargetPortAssignment_9(), "rule__SystemConnDec__TargetPortAssignment_9");
					put(grammarAccess.getSystemDecAccess().getNameAssignment_1(), "rule__SystemDec__NameAssignment_1");
					put(grammarAccess.getSystemDecAccess().getSysFeaturesAssignment_3(), "rule__SystemDec__SysFeaturesAssignment_3");
					put(grammarAccess.getSystemPortInAccess().getNameAssignment_1(), "rule__SystemPortIn__NameAssignment_1");
					put(grammarAccess.getSystemPortInAccess().getInCompAssignment_3(), "rule__SystemPortIn__InCompAssignment_3");
					put(grammarAccess.getSystemPortInAccess().getInPortAssignment_5(), "rule__SystemPortIn__InPortAssignment_5");
					put(grammarAccess.getSystemPortOutAccess().getNameAssignment_1(), "rule__SystemPortOut__NameAssignment_1");
					put(grammarAccess.getSystemPortOutAccess().getOutCompAssignment_3(), "rule__SystemPortOut__OutCompAssignment_3");
					put(grammarAccess.getSystemPortOutAccess().getOutPortAssignment_5(), "rule__SystemPortOut__OutPortAssignment_5");
					put(grammarAccess.getCompConnDecAccess().getNameAssignment_1(), "rule__CompConnDec__NameAssignment_1");
					put(grammarAccess.getCompConnDecAccess().getSourceCompAssignment_3(), "rule__CompConnDec__SourceCompAssignment_3");
					put(grammarAccess.getCompConnDecAccess().getSourcePortAssignment_5(), "rule__CompConnDec__SourcePortAssignment_5");
					put(grammarAccess.getCompConnDecAccess().getTargetCompAssignment_7(), "rule__CompConnDec__TargetCompAssignment_7");
					put(grammarAccess.getCompConnDecAccess().getTargetPortAssignment_9(), "rule__CompConnDec__TargetPortAssignment_9");
					put(grammarAccess.getComponentImplAccess().getNameAssignment_1(), "rule__ComponentImpl__NameAssignment_1");
					put(grammarAccess.getComponentImplAccess().getSuperTypeAssignment_3(), "rule__ComponentImpl__SuperTypeAssignment_3");
					put(grammarAccess.getComponentTypeAccess().getNameAssignment_1(), "rule__ComponentType__NameAssignment_1");
					put(grammarAccess.getComponentTypeAccess().getCompFeaturesAssignment_3(), "rule__ComponentType__CompFeaturesAssignment_3");
					put(grammarAccess.getComponentFeatureAccess().getPortsAssignment(), "rule__ComponentFeature__PortsAssignment");
					put(grammarAccess.getInPortAccess().getNameAssignment_1(), "rule__InPort__NameAssignment_1");
					put(grammarAccess.getInPortAccess().getSuperTypeAssignment_3(), "rule__InPort__SuperTypeAssignment_3");
					put(grammarAccess.getOutPortAccess().getNameAssignment_1(), "rule__OutPort__NameAssignment_1");
					put(grammarAccess.getOutPortAccess().getSuperTypeAssignment_3(), "rule__OutPort__SuperTypeAssignment_3");
					put(grammarAccess.getPortTypeAccess().getNameAssignment_1(), "rule__PortType__NameAssignment_1");
					put(grammarAccess.getPortTypeAccess().getEModesAssignment_3(), "rule__PortType__EModesAssignment_3");
					put(grammarAccess.getErrorModesAccess().getNameAssignment_1(), "rule__ErrorModes__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalComponentModelParser typedParser = (InternalComponentModelParser) parser;
			typedParser.entryRuleComponentModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ComponentModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ComponentModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
