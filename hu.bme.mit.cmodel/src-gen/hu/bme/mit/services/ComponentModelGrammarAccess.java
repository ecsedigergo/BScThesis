/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ComponentModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ComponentModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.ComponentModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//ComponentModel:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemConnDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	SystemDec | SystemConnDec;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemDec | SystemConnDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemDec
		public RuleCall getSystemDecParserRuleCall_0() { return cSystemDecParserRuleCall_0; }
		
		//SystemConnDec
		public RuleCall getSystemConnDecParserRuleCall_1() { return cSystemConnDecParserRuleCall_1; }
	}
	public class SystemConnDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.SystemConnDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemConnectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceSystemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceSystemSystemDecCrossReference_3_0 = (CrossReference)cSourceSystemAssignment_3.eContents().get(0);
		private final RuleCall cSourceSystemSystemDecIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceSystemSystemDecCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourcePortAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourcePortSystemPortDecCrossReference_5_0 = (CrossReference)cSourcePortAssignment_5.eContents().get(0);
		private final RuleCall cSourcePortSystemPortDecIDTerminalRuleCall_5_0_1 = (RuleCall)cSourcePortSystemPortDecCrossReference_5_0.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetSystemAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetSystemSystemDecCrossReference_7_0 = (CrossReference)cTargetSystemAssignment_7.eContents().get(0);
		private final RuleCall cTargetSystemSystemDecIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetSystemSystemDecCrossReference_7_0.eContents().get(1);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetPortAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetPortSystemPortDecCrossReference_9_0 = (CrossReference)cTargetPortAssignment_9.eContents().get(0);
		private final RuleCall cTargetPortSystemPortDecIDTerminalRuleCall_9_0_1 = (RuleCall)cTargetPortSystemPortDecCrossReference_9_0.eContents().get(1);
		
		////ImportE | 
		////ImportE:
		////	'import emodel' includedEModel=[emod::ErrorModel];
		//SystemConnDec:
		//	'system connection' name=QualifiedName 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortDec]
		//	'to' targetSystem=[SystemDec] '.' targetPort=[SystemPortDec];
		@Override public ParserRule getRule() { return rule; }
		
		//'system connection' name=QualifiedName 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortDec] 'to'
		//targetSystem=[SystemDec] '.' targetPort=[SystemPortDec]
		public Group getGroup() { return cGroup; }
		
		//'system connection'
		public Keyword getSystemConnectionKeyword_0() { return cSystemConnectionKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//sourceSystem=[SystemDec]
		public Assignment getSourceSystemAssignment_3() { return cSourceSystemAssignment_3; }
		
		//[SystemDec]
		public CrossReference getSourceSystemSystemDecCrossReference_3_0() { return cSourceSystemSystemDecCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceSystemSystemDecIDTerminalRuleCall_3_0_1() { return cSourceSystemSystemDecIDTerminalRuleCall_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//sourcePort=[SystemPortDec]
		public Assignment getSourcePortAssignment_5() { return cSourcePortAssignment_5; }
		
		//[SystemPortDec]
		public CrossReference getSourcePortSystemPortDecCrossReference_5_0() { return cSourcePortSystemPortDecCrossReference_5_0; }
		
		//ID
		public RuleCall getSourcePortSystemPortDecIDTerminalRuleCall_5_0_1() { return cSourcePortSystemPortDecIDTerminalRuleCall_5_0_1; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//targetSystem=[SystemDec]
		public Assignment getTargetSystemAssignment_7() { return cTargetSystemAssignment_7; }
		
		//[SystemDec]
		public CrossReference getTargetSystemSystemDecCrossReference_7_0() { return cTargetSystemSystemDecCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetSystemSystemDecIDTerminalRuleCall_7_0_1() { return cTargetSystemSystemDecIDTerminalRuleCall_7_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }
		
		//targetPort=[SystemPortDec]
		public Assignment getTargetPortAssignment_9() { return cTargetPortAssignment_9; }
		
		//[SystemPortDec]
		public CrossReference getTargetPortSystemPortDecCrossReference_9_0() { return cTargetPortSystemPortDecCrossReference_9_0; }
		
		//ID
		public RuleCall getTargetPortSystemPortDecIDTerminalRuleCall_9_0_1() { return cTargetPortSystemPortDecIDTerminalRuleCall_9_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class SystemDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.SystemDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemDeclarationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSysFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSysFeaturesAbstractFeaturesParserRuleCall_3_0 = (RuleCall)cSysFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SystemDec:
		//	'system declaration' name=QualifiedName '{'
		//	sysFeatures+=AbstractFeatures*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system declaration' name=QualifiedName '{' sysFeatures+=AbstractFeatures* '}'
		public Group getGroup() { return cGroup; }
		
		//'system declaration'
		public Keyword getSystemDeclarationKeyword_0() { return cSystemDeclarationKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//sysFeatures+=AbstractFeatures*
		public Assignment getSysFeaturesAssignment_3() { return cSysFeaturesAssignment_3; }
		
		//AbstractFeatures
		public RuleCall getSysFeaturesAbstractFeaturesParserRuleCall_3_0() { return cSysFeaturesAbstractFeaturesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AbstractFeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.AbstractFeatures");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentImplParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompConnDecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPortTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSystemPortDecParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractFeatures:
		//	ComponentType | ComponentImpl | CompConnDec | PortType | SystemPortDec;
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentType | ComponentImpl | CompConnDec | PortType | SystemPortDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComponentType
		public RuleCall getComponentTypeParserRuleCall_0() { return cComponentTypeParserRuleCall_0; }
		
		//ComponentImpl
		public RuleCall getComponentImplParserRuleCall_1() { return cComponentImplParserRuleCall_1; }
		
		//CompConnDec
		public RuleCall getCompConnDecParserRuleCall_2() { return cCompConnDecParserRuleCall_2; }
		
		//PortType
		public RuleCall getPortTypeParserRuleCall_3() { return cPortTypeParserRuleCall_3; }
		
		//SystemPortDec
		public RuleCall getSystemPortDecParserRuleCall_4() { return cSystemPortDecParserRuleCall_4; }
	}
	public class SystemPortDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.SystemPortDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemPortInParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemPortOutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SystemPortDec:
		//	SystemPortIn | SystemPortOut;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemPortIn | SystemPortOut
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemPortIn
		public RuleCall getSystemPortInParserRuleCall_0() { return cSystemPortInParserRuleCall_0; }
		
		//SystemPortOut
		public RuleCall getSystemPortOutParserRuleCall_1() { return cSystemPortOutParserRuleCall_1; }
	}
	public class SystemPortInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.SystemPortIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemPortInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInCompAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInCompComponentImplCrossReference_3_0 = (CrossReference)cInCompAssignment_3.eContents().get(0);
		private final RuleCall cInCompComponentImplIDTerminalRuleCall_3_0_1 = (RuleCall)cInCompComponentImplCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInPortAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInPortInPortCrossReference_5_0 = (CrossReference)cInPortAssignment_5.eContents().get(0);
		private final RuleCall cInPortInPortIDTerminalRuleCall_5_0_1 = (RuleCall)cInPortInPortCrossReference_5_0.eContents().get(1);
		
		//SystemPortIn:
		//	'system port in' name=QualifiedName 'to' inComp=[ComponentImpl] '.' inPort=[InPort];
		@Override public ParserRule getRule() { return rule; }
		
		//'system port in' name=QualifiedName 'to' inComp=[ComponentImpl] '.' inPort=[InPort]
		public Group getGroup() { return cGroup; }
		
		//'system port in'
		public Keyword getSystemPortInKeyword_0() { return cSystemPortInKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//inComp=[ComponentImpl]
		public Assignment getInCompAssignment_3() { return cInCompAssignment_3; }
		
		//[ComponentImpl]
		public CrossReference getInCompComponentImplCrossReference_3_0() { return cInCompComponentImplCrossReference_3_0; }
		
		//ID
		public RuleCall getInCompComponentImplIDTerminalRuleCall_3_0_1() { return cInCompComponentImplIDTerminalRuleCall_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//inPort=[InPort]
		public Assignment getInPortAssignment_5() { return cInPortAssignment_5; }
		
		//[InPort]
		public CrossReference getInPortInPortCrossReference_5_0() { return cInPortInPortCrossReference_5_0; }
		
		//ID
		public RuleCall getInPortInPortIDTerminalRuleCall_5_0_1() { return cInPortInPortIDTerminalRuleCall_5_0_1; }
	}
	public class SystemPortOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.SystemPortOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemPortOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOutCompAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOutCompComponentImplCrossReference_3_0 = (CrossReference)cOutCompAssignment_3.eContents().get(0);
		private final RuleCall cOutCompComponentImplIDTerminalRuleCall_3_0_1 = (RuleCall)cOutCompComponentImplCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutPortAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cOutPortOutPortCrossReference_5_0 = (CrossReference)cOutPortAssignment_5.eContents().get(0);
		private final RuleCall cOutPortOutPortIDTerminalRuleCall_5_0_1 = (RuleCall)cOutPortOutPortCrossReference_5_0.eContents().get(1);
		
		//SystemPortOut:
		//	'system port out' name=QualifiedName 'from' outComp=[ComponentImpl] '.' outPort=[OutPort];
		@Override public ParserRule getRule() { return rule; }
		
		//'system port out' name=QualifiedName 'from' outComp=[ComponentImpl] '.' outPort=[OutPort]
		public Group getGroup() { return cGroup; }
		
		//'system port out'
		public Keyword getSystemPortOutKeyword_0() { return cSystemPortOutKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//outComp=[ComponentImpl]
		public Assignment getOutCompAssignment_3() { return cOutCompAssignment_3; }
		
		//[ComponentImpl]
		public CrossReference getOutCompComponentImplCrossReference_3_0() { return cOutCompComponentImplCrossReference_3_0; }
		
		//ID
		public RuleCall getOutCompComponentImplIDTerminalRuleCall_3_0_1() { return cOutCompComponentImplIDTerminalRuleCall_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//outPort=[OutPort]
		public Assignment getOutPortAssignment_5() { return cOutPortAssignment_5; }
		
		//[OutPort]
		public CrossReference getOutPortOutPortCrossReference_5_0() { return cOutPortOutPortCrossReference_5_0; }
		
		//ID
		public RuleCall getOutPortOutPortIDTerminalRuleCall_5_0_1() { return cOutPortOutPortIDTerminalRuleCall_5_0_1; }
	}
	public class CompConnDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.CompConnDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceCompAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceCompComponentImplCrossReference_3_0 = (CrossReference)cSourceCompAssignment_3.eContents().get(0);
		private final RuleCall cSourceCompComponentImplIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceCompComponentImplCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourcePortAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourcePortOutPortCrossReference_5_0 = (CrossReference)cSourcePortAssignment_5.eContents().get(0);
		private final RuleCall cSourcePortOutPortIDTerminalRuleCall_5_0_1 = (RuleCall)cSourcePortOutPortCrossReference_5_0.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetCompAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetCompComponentImplCrossReference_7_0 = (CrossReference)cTargetCompAssignment_7.eContents().get(0);
		private final RuleCall cTargetCompComponentImplIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetCompComponentImplCrossReference_7_0.eContents().get(1);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetPortAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetPortInPortCrossReference_9_0 = (CrossReference)cTargetPortAssignment_9.eContents().get(0);
		private final RuleCall cTargetPortInPortIDTerminalRuleCall_9_0_1 = (RuleCall)cTargetPortInPortCrossReference_9_0.eContents().get(1);
		
		//CompConnDec:
		//	'connection' name=ID 'from' sourceComp=[ComponentImpl] '.' sourcePort=[OutPort]
		//	'to' targetComp=[ComponentImpl] '.' targetPort=[InPort];
		@Override public ParserRule getRule() { return rule; }
		
		//'connection' name=ID 'from' sourceComp=[ComponentImpl] '.' sourcePort=[OutPort] 'to' targetComp=[ComponentImpl] '.'
		//targetPort=[InPort]
		public Group getGroup() { return cGroup; }
		
		//'connection'
		public Keyword getConnectionKeyword_0() { return cConnectionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//sourceComp=[ComponentImpl]
		public Assignment getSourceCompAssignment_3() { return cSourceCompAssignment_3; }
		
		//[ComponentImpl]
		public CrossReference getSourceCompComponentImplCrossReference_3_0() { return cSourceCompComponentImplCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceCompComponentImplIDTerminalRuleCall_3_0_1() { return cSourceCompComponentImplIDTerminalRuleCall_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//sourcePort=[OutPort]
		public Assignment getSourcePortAssignment_5() { return cSourcePortAssignment_5; }
		
		//[OutPort]
		public CrossReference getSourcePortOutPortCrossReference_5_0() { return cSourcePortOutPortCrossReference_5_0; }
		
		//ID
		public RuleCall getSourcePortOutPortIDTerminalRuleCall_5_0_1() { return cSourcePortOutPortIDTerminalRuleCall_5_0_1; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//targetComp=[ComponentImpl]
		public Assignment getTargetCompAssignment_7() { return cTargetCompAssignment_7; }
		
		//[ComponentImpl]
		public CrossReference getTargetCompComponentImplCrossReference_7_0() { return cTargetCompComponentImplCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetCompComponentImplIDTerminalRuleCall_7_0_1() { return cTargetCompComponentImplIDTerminalRuleCall_7_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }
		
		//targetPort=[InPort]
		public Assignment getTargetPortAssignment_9() { return cTargetPortAssignment_9; }
		
		//[InPort]
		public CrossReference getTargetPortInPortCrossReference_9_0() { return cTargetPortInPortCrossReference_9_0; }
		
		//ID
		public RuleCall getTargetPortInPortIDTerminalRuleCall_9_0_1() { return cTargetPortInPortIDTerminalRuleCall_9_0_1; }
	}
	public class ComponentImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.ComponentImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentImplementationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuperTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSuperTypeComponentTypeCrossReference_3_0 = (CrossReference)cSuperTypeAssignment_3.eContents().get(0);
		private final RuleCall cSuperTypeComponentTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSuperTypeComponentTypeCrossReference_3_0.eContents().get(1);
		
		//ComponentImpl:
		//	'component implementation' name=QualifiedName ':' superType=[ComponentType];
		@Override public ParserRule getRule() { return rule; }
		
		//'component implementation' name=QualifiedName ':' superType=[ComponentType]
		public Group getGroup() { return cGroup; }
		
		//'component implementation'
		public Keyword getComponentImplementationKeyword_0() { return cComponentImplementationKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//superType=[ComponentType]
		public Assignment getSuperTypeAssignment_3() { return cSuperTypeAssignment_3; }
		
		//[ComponentType]
		public CrossReference getSuperTypeComponentTypeCrossReference_3_0() { return cSuperTypeComponentTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSuperTypeComponentTypeIDTerminalRuleCall_3_0_1() { return cSuperTypeComponentTypeIDTerminalRuleCall_3_0_1; }
	}
	public class ComponentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.ComponentType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCompFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompFeaturesComponentFeatureParserRuleCall_3_0 = (RuleCall)cCompFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentType:
		//	'component type' name=QualifiedName '{'
		//	compFeatures+=ComponentFeature*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'component type' name=QualifiedName '{' compFeatures+=ComponentFeature* '}'
		public Group getGroup() { return cGroup; }
		
		//'component type'
		public Keyword getComponentTypeKeyword_0() { return cComponentTypeKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//compFeatures+=ComponentFeature*
		public Assignment getCompFeaturesAssignment_3() { return cCompFeaturesAssignment_3; }
		
		//ComponentFeature
		public RuleCall getCompFeaturesComponentFeatureParserRuleCall_3_0() { return cCompFeaturesComponentFeatureParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComponentFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.ComponentFeature");
		private final Assignment cPortsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_0 = (RuleCall)cPortsAssignment.eContents().get(0);
		
		//ComponentFeature:
		//	ports+=Port;
		@Override public ParserRule getRule() { return rule; }
		
		//ports+=Port
		public Assignment getPortsAssignment() { return cPortsAssignment; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_0() { return cPortsPortParserRuleCall_0; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Port:
		//	InPort | OutPort;
		@Override public ParserRule getRule() { return rule; }
		
		//InPort | OutPort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InPort
		public RuleCall getInPortParserRuleCall_0() { return cInPortParserRuleCall_0; }
		
		//OutPort
		public RuleCall getOutPortParserRuleCall_1() { return cOutPortParserRuleCall_1; }
	}
	public class InPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.InPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortInstanceInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuperTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSuperTypePortTypeCrossReference_3_0 = (CrossReference)cSuperTypeAssignment_3.eContents().get(0);
		private final RuleCall cSuperTypePortTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSuperTypePortTypeCrossReference_3_0.eContents().get(1);
		
		//InPort:
		//	'port instance in' name=QualifiedName ':' superType=[PortType];
		@Override public ParserRule getRule() { return rule; }
		
		//'port instance in' name=QualifiedName ':' superType=[PortType]
		public Group getGroup() { return cGroup; }
		
		//'port instance in'
		public Keyword getPortInstanceInKeyword_0() { return cPortInstanceInKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//superType=[PortType]
		public Assignment getSuperTypeAssignment_3() { return cSuperTypeAssignment_3; }
		
		//[PortType]
		public CrossReference getSuperTypePortTypeCrossReference_3_0() { return cSuperTypePortTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSuperTypePortTypeIDTerminalRuleCall_3_0_1() { return cSuperTypePortTypeIDTerminalRuleCall_3_0_1; }
	}
	public class OutPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.OutPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortInstanceOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuperTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSuperTypePortTypeCrossReference_3_0 = (CrossReference)cSuperTypeAssignment_3.eContents().get(0);
		private final RuleCall cSuperTypePortTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSuperTypePortTypeCrossReference_3_0.eContents().get(1);
		
		//OutPort:
		//	'port instance out' name=QualifiedName ':' superType=[PortType];
		@Override public ParserRule getRule() { return rule; }
		
		//'port instance out' name=QualifiedName ':' superType=[PortType]
		public Group getGroup() { return cGroup; }
		
		//'port instance out'
		public Keyword getPortInstanceOutKeyword_0() { return cPortInstanceOutKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//superType=[PortType]
		public Assignment getSuperTypeAssignment_3() { return cSuperTypeAssignment_3; }
		
		//[PortType]
		public CrossReference getSuperTypePortTypeCrossReference_3_0() { return cSuperTypePortTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSuperTypePortTypeIDTerminalRuleCall_3_0_1() { return cSuperTypePortTypeIDTerminalRuleCall_3_0_1; }
	}
	public class PortTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.PortType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEModesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEModesErrorModesParserRuleCall_3_0 = (RuleCall)cEModesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PortType:
		//	'port type' name=QualifiedName '{'
		//	eModes=errorModes*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'port type' name=QualifiedName '{' eModes=errorModes* '}'
		public Group getGroup() { return cGroup; }
		
		//'port type'
		public Keyword getPortTypeKeyword_0() { return cPortTypeKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//eModes=errorModes*
		public Assignment getEModesAssignment_3() { return cEModesAssignment_3; }
		
		//errorModes
		public RuleCall getEModesErrorModesParserRuleCall_3_0() { return cEModesErrorModesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ErrorModesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.ComponentModel.errorModes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorModeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//errorModes:
		//	'error mode' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'error mode' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'error mode'
		public Keyword getErrorModeKeyword_0() { return cErrorModeKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	
	
	private final ComponentModelElements pComponentModel;
	private final AbstractElementElements pAbstractElement;
	private final SystemConnDecElements pSystemConnDec;
	private final QualifiedNameElements pQualifiedName;
	private final SystemDecElements pSystemDec;
	private final AbstractFeaturesElements pAbstractFeatures;
	private final SystemPortDecElements pSystemPortDec;
	private final SystemPortInElements pSystemPortIn;
	private final SystemPortOutElements pSystemPortOut;
	private final CompConnDecElements pCompConnDec;
	private final ComponentImplElements pComponentImpl;
	private final ComponentTypeElements pComponentType;
	private final ComponentFeatureElements pComponentFeature;
	private final PortElements pPort;
	private final InPortElements pInPort;
	private final OutPortElements pOutPort;
	private final PortTypeElements pPortType;
	private final ErrorModesElements pErrorModes;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ComponentModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pComponentModel = new ComponentModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pSystemConnDec = new SystemConnDecElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pSystemDec = new SystemDecElements();
		this.pAbstractFeatures = new AbstractFeaturesElements();
		this.pSystemPortDec = new SystemPortDecElements();
		this.pSystemPortIn = new SystemPortInElements();
		this.pSystemPortOut = new SystemPortOutElements();
		this.pCompConnDec = new CompConnDecElements();
		this.pComponentImpl = new ComponentImplElements();
		this.pComponentType = new ComponentTypeElements();
		this.pComponentFeature = new ComponentFeatureElements();
		this.pPort = new PortElements();
		this.pInPort = new InPortElements();
		this.pOutPort = new OutPortElements();
		this.pPortType = new PortTypeElements();
		this.pErrorModes = new ErrorModesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.ComponentModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ComponentModel:
	//	elements+=AbstractElement*;
	public ComponentModelElements getComponentModelAccess() {
		return pComponentModel;
	}
	
	public ParserRule getComponentModelRule() {
		return getComponentModelAccess().getRule();
	}
	
	//AbstractElement:
	//	SystemDec | SystemConnDec;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	////ImportE | 
	////ImportE:
	////	'import emodel' includedEModel=[emod::ErrorModel];
	//SystemConnDec:
	//	'system connection' name=QualifiedName 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortDec]
	//	'to' targetSystem=[SystemDec] '.' targetPort=[SystemPortDec];
	public SystemConnDecElements getSystemConnDecAccess() {
		return pSystemConnDec;
	}
	
	public ParserRule getSystemConnDecRule() {
		return getSystemConnDecAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//SystemDec:
	//	'system declaration' name=QualifiedName '{'
	//	sysFeatures+=AbstractFeatures*
	//	'}';
	public SystemDecElements getSystemDecAccess() {
		return pSystemDec;
	}
	
	public ParserRule getSystemDecRule() {
		return getSystemDecAccess().getRule();
	}
	
	//AbstractFeatures:
	//	ComponentType | ComponentImpl | CompConnDec | PortType | SystemPortDec;
	public AbstractFeaturesElements getAbstractFeaturesAccess() {
		return pAbstractFeatures;
	}
	
	public ParserRule getAbstractFeaturesRule() {
		return getAbstractFeaturesAccess().getRule();
	}
	
	//SystemPortDec:
	//	SystemPortIn | SystemPortOut;
	public SystemPortDecElements getSystemPortDecAccess() {
		return pSystemPortDec;
	}
	
	public ParserRule getSystemPortDecRule() {
		return getSystemPortDecAccess().getRule();
	}
	
	//SystemPortIn:
	//	'system port in' name=QualifiedName 'to' inComp=[ComponentImpl] '.' inPort=[InPort];
	public SystemPortInElements getSystemPortInAccess() {
		return pSystemPortIn;
	}
	
	public ParserRule getSystemPortInRule() {
		return getSystemPortInAccess().getRule();
	}
	
	//SystemPortOut:
	//	'system port out' name=QualifiedName 'from' outComp=[ComponentImpl] '.' outPort=[OutPort];
	public SystemPortOutElements getSystemPortOutAccess() {
		return pSystemPortOut;
	}
	
	public ParserRule getSystemPortOutRule() {
		return getSystemPortOutAccess().getRule();
	}
	
	//CompConnDec:
	//	'connection' name=ID 'from' sourceComp=[ComponentImpl] '.' sourcePort=[OutPort]
	//	'to' targetComp=[ComponentImpl] '.' targetPort=[InPort];
	public CompConnDecElements getCompConnDecAccess() {
		return pCompConnDec;
	}
	
	public ParserRule getCompConnDecRule() {
		return getCompConnDecAccess().getRule();
	}
	
	//ComponentImpl:
	//	'component implementation' name=QualifiedName ':' superType=[ComponentType];
	public ComponentImplElements getComponentImplAccess() {
		return pComponentImpl;
	}
	
	public ParserRule getComponentImplRule() {
		return getComponentImplAccess().getRule();
	}
	
	//ComponentType:
	//	'component type' name=QualifiedName '{'
	//	compFeatures+=ComponentFeature*
	//	'}';
	public ComponentTypeElements getComponentTypeAccess() {
		return pComponentType;
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}
	
	//ComponentFeature:
	//	ports+=Port;
	public ComponentFeatureElements getComponentFeatureAccess() {
		return pComponentFeature;
	}
	
	public ParserRule getComponentFeatureRule() {
		return getComponentFeatureAccess().getRule();
	}
	
	//Port:
	//	InPort | OutPort;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//InPort:
	//	'port instance in' name=QualifiedName ':' superType=[PortType];
	public InPortElements getInPortAccess() {
		return pInPort;
	}
	
	public ParserRule getInPortRule() {
		return getInPortAccess().getRule();
	}
	
	//OutPort:
	//	'port instance out' name=QualifiedName ':' superType=[PortType];
	public OutPortElements getOutPortAccess() {
		return pOutPort;
	}
	
	public ParserRule getOutPortRule() {
		return getOutPortAccess().getRule();
	}
	
	//PortType:
	//	'port type' name=QualifiedName '{'
	//	eModes=errorModes*
	//	'}';
	public PortTypeElements getPortTypeAccess() {
		return pPortType;
	}
	
	public ParserRule getPortTypeRule() {
		return getPortTypeAccess().getRule();
	}
	
	//errorModes:
	//	'error mode' name=QualifiedName;
	public ErrorModesElements getErrorModesAccess() {
		return pErrorModes;
	}
	
	public ParserRule getErrorModesRule() {
		return getErrorModesAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
