/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.scoping

import hu.bme.mit.componentModel.CompConnDec
import hu.bme.mit.componentModel.ComponentImpl
import hu.bme.mit.componentModel.ComponentModelPackage
import hu.bme.mit.componentModel.Port
import hu.bme.mit.componentModel.SystemConnDec
import hu.bme.mit.componentModel.SystemDec
import hu.bme.mit.componentModel.SystemPortDec
import hu.bme.mit.componentModel.SystemPortIn
import hu.bme.mit.componentModel.SystemPortOut
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ComponentModelScopeProvider extends AbstractComponentModelScopeProvider {
	override getScope(EObject context, EReference reference) {
		if (context instanceof CompConnDec) {
			val conn = context as CompConnDec

			if (reference == ComponentModelPackage.Literals.COMP_CONN_DEC__SOURCE_PORT) {
				val compI = EcoreUtil2.getContainerOfType(conn.sourceComp, ComponentImpl)
				if(compI == null) return IScope.NULLSCOPE

				val compT = compI.superType
				val ports = EcoreUtil2.getAllContentsOfType(compT, Port)
				if (ports == null) {
					return IScope.NULLSCOPE
				} else {
					return Scopes.scopeFor(ports)
				}
			}
			// super.getScope(context, reference)
			if (reference == ComponentModelPackage.Literals.COMP_CONN_DEC__TARGET_PORT) {
				val compI = EcoreUtil2.getContainerOfType(conn.targetComp, ComponentImpl)
				if(compI == null) return IScope.NULLSCOPE

				val compT = compI.superType
				val ports = EcoreUtil2.getAllContentsOfType(compT, Port)
				if (ports == null) {
					return IScope.NULLSCOPE
				} else {
					// validate portType
					val sourceTypePort = newArrayList()
					for (port : ports) {
						if (port.superType == conn.sourcePort.superType) {
							sourceTypePort.add(port)
						}
					}
					if (sourceTypePort != null) {
						return Scopes.scopeFor(sourceTypePort)
					}
				}
			}
		}
		if (context instanceof SystemPortIn) {
			val inPortDec = context as SystemPortIn
			if (reference == ComponentModelPackage.Literals.SYSTEM_PORT_IN__IN_PORT) {
				val compI = EcoreUtil2.getContainerOfType(inPortDec.inComp, ComponentImpl)
				if(compI == null) return IScope.NULLSCOPE

				val compT = compI.superType
				val ports = EcoreUtil2.getAllContentsOfType(compT, Port)
				if (ports == null) {
					return IScope.NULLSCOPE
				} else {
					return Scopes.scopeFor(ports)

				}
			}
		}
		if (context instanceof SystemPortOut) {
			val inPortDec = context as SystemPortOut
			if (reference == ComponentModelPackage.Literals.SYSTEM_PORT_OUT__OUT_PORT) {
				val compI = EcoreUtil2.getContainerOfType(inPortDec.outComp, ComponentImpl)
				if(compI == null) return IScope.NULLSCOPE

				val compT = compI.superType
				val ports = EcoreUtil2.getAllContentsOfType(compT, Port)
				if (ports == null) {
					return IScope.NULLSCOPE
				} else {

					return Scopes.scopeFor(ports)

				}
			}
		}

		if (context instanceof SystemConnDec) {
			val conn = context as SystemConnDec
			if (reference == ComponentModelPackage.Literals.SYSTEM_CONN_DEC__SOURCE_PORT) {
				val systemD = EcoreUtil2.getContainerOfType(conn.sourceSystem, SystemDec)
				if(systemD == null) return IScope.NULLSCOPE

				val ports = EcoreUtil2.getAllContentsOfType(systemD, SystemPortDec)
				if (ports == null) {
					return IScope.NULLSCOPE
				}else{
					return Scopes.scopeFor(ports)
				}
			}
		}
		if (context instanceof SystemConnDec) {
			val conn = context as SystemConnDec
			if (reference == ComponentModelPackage.Literals.SYSTEM_CONN_DEC__TARGET_PORT) {
				val systemD = EcoreUtil2.getContainerOfType(conn.targetSystem, SystemDec)
				if(systemD == null) return IScope.NULLSCOPE

				val ports = EcoreUtil2.getAllContentsOfType(systemD, SystemPortDec)
				if (ports == null) {
					return IScope.NULLSCOPE
				}else{
					return Scopes.scopeFor(ports)
				}
			}
		}
		super.getScope(context, reference)

	}
	
}
